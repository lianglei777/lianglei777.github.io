<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>welcome</title>
    <url>/post/202103280830/</url>
    <content><![CDATA[<center></center>

<hr>
<center><font face="黑体" color="#428bca" size="6">Welcome to Leon Blog</font></center>

<hr>
 <!-- <table><tr><td bgcolor=#555><center><font face="黑体" color=#FFF size=6 >Welcome to Leon Blog</font></center></td></tr></table> -->


<!-- hexo new [layout] <title>  -->




]]></content>
  </entry>
  <entry>
    <title>手写符合规范的Promise以及相关工具方法</title>
    <url>/post/20220307111700/</url>
    <content><![CDATA[<blockquote>
<p>主要是一个个人学习总结， 为了加深理解</p>
</blockquote>
<blockquote>
<p><a href="https://promisesaplus.com/">Promise/A+ 规范</a> </p>
</blockquote>
<span id="more"></span>

<h3 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h3><p>符合 Promise/A+ 规范, 参考了网上文章</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// executor 是一个执行器，进入会立即执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">this</span>.reject(error)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">    status = PENDING;</span><br><span class="line">    <span class="comment">// 成功之后的值</span></span><br><span class="line">    value = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 失败之后的原因</span></span><br><span class="line">    reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储成功回调函数</span></span><br><span class="line">    onFulfilledCallbacks = [];</span><br><span class="line">    <span class="comment">// 存储失败回调函数</span></span><br><span class="line">    onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更改成功后的状态</span></span><br><span class="line">    resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;this.onFulfilledCallbacks ==&gt;&quot;</span>, value, <span class="built_in">this</span>.onFulfilledCallbacks);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// resolve里面将所有成功的回调拿出来执行</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">this</span>.onFulfilledCallbacks.length) &#123;</span><br><span class="line">                <span class="comment">// Array.shift() 取出数组第一个元素，然后（）调用，取出后，数组将失去该元素，直到数组为空</span></span><br><span class="line">                <span class="built_in">this</span>.onFulfilledCallbacks.shift()(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更改失败后的状态</span></span><br><span class="line">    reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">            <span class="comment">// 状态成功为失败</span></span><br><span class="line">            <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">            <span class="comment">// 保存失败后的原因</span></span><br><span class="line">            <span class="built_in">this</span>.reason = reason;</span><br><span class="line">            <span class="comment">// resolve里面将所有失败的回调拿出来执行</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">this</span>.onRejectedCallbacks.length) &#123;</span><br><span class="line">                <span class="built_in">this</span>.onRejectedCallbacks.shift()(reason)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> realOnFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="keyword">const</span> realOnRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">        <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> fulfilledMicrotask = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">                queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">                        <span class="keyword">const</span> x = realOnFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">                        <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">                        <span class="built_in">this</span>.resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        reject(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> rejectedMicrotask = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">                queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">                        <span class="keyword">const</span> x = realOnRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">                        <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">                        <span class="built_in">this</span>.resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        reject(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断状态</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">                fulfilledMicrotask();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">                rejectedMicrotask();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="comment">// 等待</span></span><br><span class="line">                <span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">                <span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line">                <span class="built_in">this</span>.onFulfilledCallbacks.push(fulfilledMicrotask);</span><br><span class="line">                <span class="built_in">this</span>.onRejectedCallbacks.push(rejectedMicrotask)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> promise2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> resolve = <span class="function">(<span class="params">parameter</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果传入 MyPromise 就直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            <span class="keyword">return</span> parameter</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转成常规方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(parameter))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reject 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    resolvePromise = <span class="function">(<span class="params">promise2, x, resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">        <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">            <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;自身循环调用错误&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断x是不是 MyPromise 实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">            <span class="comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span></span><br><span class="line">            <span class="comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">            <span class="comment">// 简化之后</span></span><br><span class="line">            x.then(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 普通值</span></span><br><span class="line">            resolve(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Promise-resolve-value"><a href="#Promise-resolve-value" class="headerlink" title="Promise.resolve(value)"></a>Promise.resolve(value)</h3><p>主要作用是返回一个fulfilled状态的promise对象</p>
<blockquote>
<p>如果value不是promise对象就包装成一个promise对象返回返回, 如果是promise对象就返回value</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.myResove = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &amp;&amp; (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(value))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-reject-value"><a href="#Promise-reject-value" class="headerlink" title="Promise.reject(value)"></a>Promise.reject(value)</h3><p>主要作用是返回一个promise对象, 与 resolve 实现差别不大</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.myReject = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_, reject</span>) =&gt;</span> reject(value))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-all-p1-p2-p3"><a href="#Promise-all-p1-p2-p3" class="headerlink" title="Promise.all([p1,p2,p3])"></a>Promise.all([p1,p2,p3])</h3><p>并发执行 p1,p2,p3, 只有 p 状态 均变为 fulfilled，才可以resolve 返回，结果顺序与<strong>传参顺序一致</strong>，否则返回<strong>第一个状态变为 rejected</strong> 的  reject 回来 的值。无论成功失败返回的值都是Promise对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.myAll = <span class="function">(<span class="params">args = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回一个Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(args)) reject(<span class="string">&#x27;传参错误&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="keyword">const</span> length = args.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> resolve([]);</span><br><span class="line"></span><br><span class="line">        args.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 传参有可能不是Promise对象</span></span><br><span class="line">            <span class="built_in">Promise</span>.resolve(item)</span><br><span class="line">                .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 保证返回顺序</span></span><br><span class="line">                    result[index] = res;</span><br><span class="line">                    <span class="comment">// 执行完毕返回</span></span><br><span class="line">                    <span class="keyword">if</span> (count === length) &#123;</span><br><span class="line">                        resolve(result)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                    reject(error)</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-allSettled-p1-p2-p3"><a href="#Promise-allSettled-p1-p2-p3" class="headerlink" title="Promise.allSettled([p1,p2,p3])"></a>Promise.allSettled([p1,p2,p3])</h3><p>与 Promise.all 类似，区别在于 必须 p1,p2,p3 均执行完毕才会返回结果，无论 p1,p2,p3 返回状态是 fulfilled 还是 rejeced，均不会提前返回结果。返回结果的结构上也有差异</p>
<p><strong>ES2020 引入了Promise.allSettled()方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现方法就是 将 Promise.all 改造一下</span></span><br><span class="line"><span class="built_in">Promise</span>.myAllSettled = <span class="function">(<span class="params">args = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回一个Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(args)) reject(<span class="string">&#x27;传参错误&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="keyword">const</span> length = args.length;</span><br><span class="line">        <span class="keyword">if</span> (length === <span class="number">0</span>) <span class="keyword">return</span> resolve([]);</span><br><span class="line"></span><br><span class="line">        args.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 传参有可能不是Promise对象</span></span><br><span class="line">            <span class="built_in">Promise</span>.resolve(item)</span><br><span class="line">                .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 保证返回顺序</span></span><br><span class="line">                    result[index] = &#123;</span><br><span class="line">                        status: <span class="string">&#x27;fufilled&#x27;</span>,</span><br><span class="line">                        value: res</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="comment">// 执行完毕返回</span></span><br><span class="line">                    <span class="keyword">if</span> (count === length) &#123;</span><br><span class="line">                        resolve(result)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 保证返回顺序</span></span><br><span class="line">                    result[index] = &#123;</span><br><span class="line">                        status: <span class="string">&#x27;rejected&#x27;</span>,</span><br><span class="line">                        value: res</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="comment">// 执行完毕返回</span></span><br><span class="line">                    <span class="keyword">if</span> (count === length) &#123;</span><br><span class="line">                        resolve(result)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-race-p1-p2-p3"><a href="#Promise-race-p1-p2-p3" class="headerlink" title="Promise.race([p1,p2,p3])"></a>Promise.race([p1,p2,p3])</h3><p>p1,p2,p3 <strong>“竞速执行”</strong>, 有一个执行完毕，就会返回结果，无论结果状态是 fulfilled， 还是 rejected</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.myRace = <span class="function">(<span class="params">args = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(args)) reject(<span class="string">&#x27;传参错误&#x27;</span>);</span><br><span class="line">        args.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(item).then(resolve).catch(reject)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-any-p1-p2-p3"><a href="#Promise-any-p1-p2-p3" class="headerlink" title="Promise.any([p1,p2,p3])"></a>Promise.any([p1,p2,p3])</h3><p>p1,p2,p3 有一个状态变为 fulfilled 就会直接 resove 返回结果，否则必须全部变为rejected，才会 reject 返回<br><strong>ES2021 引入了Promise.any()方法</strong></p>
<p><a href="https://juejin.cn/post/6945319439772434469">参考文章</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide">在 JavaScript 中通过 queueMicrotask() 使用微任务</a></p>
]]></content>
      <categories>
        <category>Study</category>
        <category>Work</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>一时兴起写的拖拽组件</title>
    <url>/post/202110082014/</url>
    <content><![CDATA[<h3 id="拖拽组件"><a href="#拖拽组件" class="headerlink" title="拖拽组件"></a>拖拽组件</h3><blockquote>
<p>开发中遇到的一个需要拖拽弹窗的场景，不想引用第三方库，就自己封装一个。</p>
</blockquote>
<p><strong>主要思路</strong></p>
<ul>
<li>根据当前鼠标断点击区域判断是否是指定的拖拽元素</li>
<li>利用鼠标的监听事件进行各种距离计算，判断当前拖拽元素是否超出指定父元素区域</li>
<li>封装 mouesEvent 初始化方法类，封装组件</li>
</ul>
<span id="more"></span>

<p><strong>例如鼠标左键拖拽蓝色区域，弹窗跟随鼠标移动，但是无法超出红线标记的范围</strong></p>
<div align="center">
<img src="/post/202110082014/drag-component-1.png" width="80%" height="80%">
</div>


<h4 id="组件代码"><a href="#组件代码" class="headerlink" title="组件代码"></a><strong>组件代码</strong></h4><p>drag/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouesEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._self = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.operateDiv = <span class="literal">null</span></span><br><span class="line">        <span class="built_in">this</span>.operateDom = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 鼠标当前选中的 dom 节点</span></span><br><span class="line">        <span class="built_in">this</span>.selectWin = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 是否允许异动</span></span><br><span class="line">        <span class="built_in">this</span>.allowMove = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 鼠标按下时的 x 坐标</span></span><br><span class="line">        <span class="built_in">this</span>.dragClientX = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 鼠标按下时的 Y 坐标</span></span><br><span class="line">        <span class="built_in">this</span>.dragClientY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选中窗口 x 轴最大偏移距离</span></span><br><span class="line">        <span class="built_in">this</span>.maxOffsetX = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 选中窗口 y 轴最大偏移距离</span></span><br><span class="line">        <span class="built_in">this</span>.maxOffsetY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父窗口 x 坐标</span></span><br><span class="line">        <span class="built_in">this</span>.fatherX = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 父窗口 Y 坐标</span></span><br><span class="line">        <span class="built_in">this</span>.fatherY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.fatherClientWidth = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.fatherClientHeight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前点击位置 距离 选中 窗口 左边界的距离</span></span><br><span class="line">        <span class="built_in">this</span>.toBorderX = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 当前点击位置 距离 选中 窗口 上边界的距离</span></span><br><span class="line">        <span class="built_in">this</span>.toBorderY = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="function"><span class="title">mouesInit</span>(<span class="params">self, wrapperElementId, dragElementId</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._self = self</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.operateDiv = dragElementId</span><br><span class="line">        <span class="built_in">this</span>.operateDom = wrapperElementId</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.mouseLisEvent()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断原生是否是指定元素的或者指定元素的子集</span></span><br><span class="line">    <span class="function"><span class="title">closest</span>(<span class="params">el, selector</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> matchesSelector = el.matches <span class="comment">// || el.webkit</span></span><br><span class="line">        <span class="keyword">while</span> (el) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matchesSelector.call(el, <span class="string">`#<span class="subst">$&#123;selector&#125;</span>`</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            el = el.parentElement</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> el</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    selectWindows = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> winDom = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.closest(e.target, <span class="built_in">this</span>.operateDiv)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.selectWin = <span class="built_in">document</span>.getElementById(<span class="built_in">this</span>.operateDom)</span><br><span class="line">            winDom = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> winDom</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定鼠标事件</span></span><br><span class="line">    <span class="function"><span class="title">mouseLisEvent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.selectWindows(e)) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.dragMouseDown(e)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragMouseMove(e)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragMouseUp(e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dragMouseDown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.dragClientX = e.clientX <span class="comment">// father.clientX</span></span><br><span class="line">        <span class="built_in">this</span>.dragClientY = e.clientY <span class="comment">// father.clientY</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box-content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.fatherClientWidth = father.clientWidth</span><br><span class="line">        <span class="built_in">this</span>.fatherClientHeight = father.clientHeight</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.fatherX = father.offsetLeft</span><br><span class="line">        <span class="built_in">this</span>.fatherY = father.offsetTop</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上下左右最大移动距离</span></span><br><span class="line">        <span class="built_in">this</span>.maxOffsetX = <span class="built_in">this</span>.fatherClientWidth - <span class="built_in">this</span>.selectWin.clientWidth</span><br><span class="line">        <span class="built_in">this</span>.maxOffsetY = <span class="built_in">this</span>.fatherClientHeight - <span class="built_in">this</span>.selectWin.clientHeight</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> divLeft = <span class="built_in">this</span>.selectWin.getBoundingClientRect().x </span><br><span class="line">        <span class="keyword">let</span> divBottom = <span class="built_in">this</span>.selectWin.getBoundingClientRect().y )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.toBorderX = e.clientX - divLeft</span><br><span class="line">        <span class="built_in">this</span>.toBorderY = e.clientY - divBottom</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.allowMove = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dragMouseMove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> offsetX = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> offsetY = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> curLeft = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> curTop = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.allowMove) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前选中窗口 相对 父窗口移动的x，y距离</span></span><br><span class="line">        offsetX = e.clientX - <span class="built_in">this</span>.fatherX</span><br><span class="line">        offsetY = e.clientY - <span class="built_in">this</span>.fatherY</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向右移动超过了最大移动距离</span></span><br><span class="line">        <span class="keyword">if</span> (offsetX &gt;= <span class="built_in">this</span>.maxOffsetX) &#123;</span><br><span class="line">            curLeft = <span class="built_in">this</span>.fatherX + <span class="built_in">this</span>.maxOffsetX</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向左移动超过了左边界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (offsetX &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            curLeft = <span class="built_in">this</span>.fatherX</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 要减去 this.toBorderX，比如按选中窗口 X 坐标 会移动到鼠标位置</span></span><br><span class="line">            curLeft = <span class="built_in">this</span>.fatherX + offsetX - <span class="built_in">this</span>.toBorderX</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向上超过了最大距离</span></span><br><span class="line">        <span class="keyword">if</span> (offsetY &gt;= <span class="built_in">this</span>.maxOffsetY) &#123;</span><br><span class="line">            curTop = <span class="built_in">this</span>.fatherY + <span class="built_in">this</span>.maxOffsetY</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向下超过了下边界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (offsetY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            curTop = <span class="built_in">this</span>.fatherY</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 要减去 this.toBorderX，比如按选中窗口 Y 坐标 会移动到鼠标位置</span></span><br><span class="line">            curTop = <span class="built_in">this</span>.fatherY + offsetY - <span class="built_in">this</span>.toBorderY</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置选中窗口位置</span></span><br><span class="line">        <span class="built_in">this</span>.selectWin.style.cssText = <span class="string">`left:<span class="subst">$&#123;curLeft&#125;</span>px; top: <span class="subst">$&#123;curTop&#125;</span>px;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dragMouseUp = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.selectWin = <span class="literal">null</span></span><br><span class="line">        <span class="built_in">this</span>.allowMove = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.dragClientX = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.dragClientY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.maxOffsetX = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.maxOffsetY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.fatherX = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.fatherY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.toBorderX = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.toBorderY = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mouesEvent</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>drag/drag.tsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MourseEvent <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mourseEvent = <span class="keyword">new</span> MourseEvent()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Drag</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">prop</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(prop)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; childElementId, dragElementId &#125; = <span class="built_in">this</span>.props</span><br><span class="line">        mourseEvent.mouesInit(<span class="built_in">this</span>, childElementId, dragElementId)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a><strong>使用方式</strong></h4><p>index.tsx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Drag <span class="keyword">from</span> <span class="string">&#x27;../../components/drag/drag&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DragPage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 默认悬浮框居中</span></span><br><span class="line">        <span class="keyword">const</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box-content&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> clientWidth = father?.clientWidth</span><br><span class="line">        <span class="keyword">let</span> clientHeight = father?.clientHeight</span><br><span class="line">        <span class="keyword">let</span> selectWin = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;boxDlg&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> curLeft = (clientWidth - selectWin.clientWidth) * <span class="number">0.5</span> + father?.offsetLeft</span><br><span class="line">        <span class="keyword">let</span> curBottom = (clientHeight - selectWin.clientHeight) * <span class="number">0.5</span> + father?.offsetTop</span><br><span class="line">        selectWin.style.cssText = <span class="string">`left:<span class="subst">$&#123;curLeft&#125;</span>px; top: <span class="subst">$&#123;curBottom&#125;</span>px;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">&quot;page-wrapper&quot;</span>&gt;</span><br><span class="line">                &lt;div id=<span class="string">&quot;box-content&quot;</span> className=<span class="string">&quot;box-content&quot;</span>&gt;</span><br><span class="line">                    <span class="comment">// 注意此处的两个 props 传参，就是子元素div 的 id</span></span><br><span class="line">                    &lt;Drag childElementId=&#123;<span class="string">&#x27;boxDlg&#x27;</span>&#125; dragElementId=&#123;<span class="string">&#x27;dragDom&#x27;</span>&#125;&gt;</span><br><span class="line">                        &lt;div id=<span class="string">&quot;boxDlg&quot;</span> className=<span class="string">&quot;box-wrapper&quot;</span>&gt;</span><br><span class="line">                            <span class="comment">// 鼠标拖拽元素</span></span><br><span class="line">                            &lt;div id=<span class="string">&quot;dragDom&quot;</span> className=<span class="string">&quot;drag-palce&quot;</span>&gt;</span><br><span class="line">                                鼠标点我就可以拖动</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/Drag&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.less</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box-content</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gainsboro;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.box-wrapper</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: fixed;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: white;</span><br><span class="line"></span><br><span class="line">            <span class="selector-class">.drag-palce</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">                <span class="attribute">text-align</span>: center;</span><br><span class="line">                <span class="attribute">background-color</span>: blue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Study</category>
        <category>Work</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器优先级与层叠上下文</title>
    <url>/post/202107291101/</url>
    <content><![CDATA[<h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a><strong>CSS 选择器</strong></h2><span id="more"></span>

<h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a><strong>选择器分类</strong></h3><ul>
<li>ID 选择器，如 #id{}</li>
<li>类选择器，如 .class{}</li>
<li>属性选择器，如 a[href=”segmentfault.com”]{}</li>
<li>伪类选择器，如 :hover{}</li>
<li>伪元素选择器，如 ::before{}</li>
<li>标签选择器，如 span{}</li>
<li>通配选择器，如 *{}</li>
</ul>
<h3 id="选择器组合方式"><a href="#选择器组合方式" class="headerlink" title="选择器组合方式"></a><strong>选择器组合方式</strong></h3><p>并未截图，自己实际写一下就能明白</p>
<h4 id="后代选择符"><a href="#后代选择符" class="headerlink" title="后代选择符"></a><strong>后代选择符</strong></h4><p>写法：(以空格分隔) .father .child{} , 生效条件：child 可以是 father 的任意层级子元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="子选择符"><a href="#子选择符" class="headerlink" title="子选择符"></a><strong>子选择符</strong></h4><p>写法：(以大于 &gt; 号分隔）.father &gt; .child{} , 生效条件：child 必须是紧邻 father 的子元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="相邻兄弟选择符"><a href="#相邻兄弟选择符" class="headerlink" title="相邻兄弟选择符"></a><strong>相邻兄弟选择符</strong></h4><p>写法：（以加号 + 分隔）.class1 + .class2{} , 生效条件：class1 和 class2 是同级的相邻元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .bros &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bro1 + .bro2 + .bro3 &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bros&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bro1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bro2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bro3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bro4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a><strong>通用兄弟选择器</strong></h4><p>写法：（以波浪号 ～ 分隔）.class1 ~ .class2 , 生效条件：class2 是 class1 之后兄弟元素就行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .bros &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> ~ <span class="selector-class">.bro</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bros&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bro&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bro&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bro&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="并用选择器"><a href="#并用选择器" class="headerlink" title="并用选择器"></a><strong>并用选择器</strong></h4><p>写法：（以逗号号 , 分隔）.class1,.class2 , 生效条件：同时拥有 class1 是 class2 才生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a><strong>优先级</strong></h3><h4 id="优先级关系："><a href="#优先级关系：" class="headerlink" title="优先级关系："></a><strong>优先级关系：</strong></h4><p>同一元素同时具有多种选择器样式时，样式生效优先级</p>
<p>内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  #content &#123;</span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .content &#123;</span><br><span class="line"><span class="css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>我是什么颜色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据优先级关系，字是<strong>红色</strong>,</p>
<h4 id="优先级计算方式"><a href="#优先级计算方式" class="headerlink" title="优先级计算方式"></a><strong>优先级计算方式</strong></h4><p>一般只有同一元素同时具有多组样式时，才需要去比较，查阅一些资料，样式优先级计算规则如下。</p>
<p>优先级由 A 、B、C、D 的值来决定的，ABCD 就对应优先级关系的分区，值计算规则如下：</p>
<ul>
<li>如果存在内联样式，那么 A = 1, 否则 A = 0;</li>
<li>B 的值等于 ID 选择器 出现的次数;</li>
<li>C 的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数;</li>
<li>D 的值等于 标签选择器 和 伪元素 出现的总次数 。</li>
</ul>
<p>举个例子</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#test-id1</span> &gt; <span class="selector-id">#test-id2</span> &gt; <span class="selector-tag">span</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.test-class</span></span><br></pre></td></tr></table></figure>

<p>套用上面的计算规则，分别计算 A、B、C、D 的值</p>
<ul>
<li>A：没有内联样式，所以 A = 0</li>
<li>B：ID 选择器(test-id1、test-id2)出现了 2 次，所以 B = 2</li>
<li>C：类选择器(.test-class)出现了 1 次， 属性选择器出现了 0 次，伪类选择器出现 0 次，C = (1 + 0 + 0) = 1</li>
<li>D：出现了 2 次（span、a）标签选择器，伪元素出现 0 次，D = (2 + 0) = 2</li>
</ul>
<p>所以<strong>本次的 A、B、C、D 的值可计作：(0, 2, 1, 2)</strong></p>
<p>多练习一下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">li</span>                                  /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) */</span><br><span class="line"><span class="attribute">ul</span> li                               /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>) */</span><br><span class="line"><span class="attribute">ul</span> ol+li                            /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>) */</span><br><span class="line"><span class="attribute">ul</span> ol+li                            /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>) */</span><br><span class="line"><span class="attribute">h1</span> + *[REL=up]                      /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>) */</span><br><span class="line"><span class="attribute">ul</span> ol li.red                        /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>) */</span><br><span class="line"><span class="attribute">li</span>.red.level                        /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>) */</span><br><span class="line"><span class="attribute">a1</span>.a<span class="number">2</span>.a<span class="number">3</span>.a<span class="number">4</span>.a<span class="number">5</span>.a<span class="number">6</span>.a<span class="number">7</span>.a<span class="number">8</span>.a<span class="number">9</span>.a<span class="number">10</span>.a<span class="number">11</span>  /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>,<span class="number">0</span>) */</span><br><span class="line"><span class="comment">#x34y                               /* (0, 1, 0, 0) */</span></span><br><span class="line"><span class="attribute">li</span>:first-child h<span class="number">2</span> .title            /* (<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>) */</span><br><span class="line"><span class="comment">#nav .selected &gt; a:hover            /* (0, 1, 2, 1) */</span></span><br><span class="line"><span class="attribute">html</span> body #nav .selected &gt; a:hover  /* (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) */</span><br></pre></td></tr></table></figure>

<p>知道了优先级的计算方式，那如何比较两个样式的优先级高低呢，<strong>比较规则: 从左往右依次进行比较 ，较大者胜出，如果相等，则继续往右移动一位进行比较 。如果 4 位全部相等，则后面的会覆盖前面的</strong>。</p>
<p>例如 (1, 0, 0, 0) &gt; (0, 1, 0, 0) &gt; (0, 0, 999, 999), 再举一个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #test-class .child &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .test-class .child &#123;</span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test-class&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test-class&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据计算规则 <strong>#test-class .child</strong> 优先级为 <strong>(0, 1, 1, 0)</strong>, <strong>.test-class .child</strong> 优先级为 <strong>(0, 0, 2, 0)<strong>，根据比较规则 (0, 1, 1, 0) 优先级更高，所以为</strong>红色</strong></p>
<h4 id="优先级特殊情况"><a href="#优先级特殊情况" class="headerlink" title="优先级特殊情况"></a><strong>优先级特殊情况</strong></h4><p>上面说了优先级比较规则，但是有一个特殊情况，大家一定不陌生，那就是 <strong>!important</strong>，上面说到<strong>内联样式具有最高的优先级</strong>，但是 <strong>!important</strong> 标记的 css 属性，可以覆盖内联样式。</p>
<p>还有 <strong>“更怪异的写法”, 内联样式 + !important</strong>，这种应该是杜绝使用的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow !important;&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上 <strong>!important</strong> 已经和优先级无关，但它与最终的结果直接相关。应该尽量避免使用，因为它破坏了样式表中的固有的计算规则。我觉得这<strong>只能作为调整样式的最后手段，而不是习惯用法</strong>。</p>
<h4 id="错误理解"><a href="#错误理解" class="headerlink" title="错误理解"></a><strong>错误理解</strong></h4><p>在查资料的过程中，我还看到另一种 <strong>选择器加权值优先级的计算方法</strong>，就是认为 一个 ID 选择器值为 100，一个类选择器值为 10，一个标签选择器值为 1，当有多个选择器时，进行值相加，比较大小。<strong>这种计算方法是错误的</strong>，具体这里就不细说了。</p>
<h2 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a><strong>层叠上下文</strong></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h3><p>层叠上下文是一个三维概念，我们看到的浏览器是一个平面的二维坐标系，如果我们加一条垂直于平面的<strong>z 轴</strong>，那就是三维坐标系，我们可以认为每个 HTML 元素分布在 z 轴 上， 而我们看向浏览器的视角，就是这条 <strong>“z 轴”</strong>，而这些元素在 z 轴 的摆放关系，就是 层叠上下文 。</p>
<div align="center">
<img src="/post/202107291101/css1.png" width="80%" height="80%">
</div>

<h3 id="层叠顺序"><a href="#层叠顺序" class="headerlink" title="层叠顺序"></a><strong>层叠顺序</strong></h3><p>层叠上下文中元素发生层叠时有着特定的垂直显示顺序，排在最上面的优先展示。</p>
<p>层叠顺序如图</p>
<div align="center">
<img src="/post/202107291101/css2.png" width="80%" height="80%">
</div>

<p><strong>比较规则</strong></p>
<ul>
<li><strong>谁大谁上</strong>： 具有明显的层叠水平标示的时候，如识别的 z-indx 值，在同一个层叠上下文领域，层叠水平值越大优先级越高</li>
<li><strong>后来居上</strong>：当元素的层叠水平一致、层叠顺序相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。</li>
</ul>
<h3 id="层叠上下文的创建"><a href="#层叠上下文的创建" class="headerlink" title="层叠上下文的创建"></a><strong>层叠上下文的创建</strong></h3><p>与 BFC（块状格式化上下文）类似，层叠上下文也基本上是有一些特定的 CSS 属性创建的</p>
<ul>
<li><p>文档根元素（html）；</p>
</li>
<li><p>position 值为 absolute（绝对定位）或 relative（相对定位）且 z-index 值不为 auto 的元素；</p>
</li>
<li><p>position 值为 fixed（固定定位）或 sticky（粘滞定位）的元素；</p>
</li>
<li><p>flex 容器（display:flex|inline-flex）的<strong>子元素</strong>，且子元素 z-index 值不为 auto</p>
</li>
<li><p>元素的 opacity 值不是 1.</p>
</li>
<li><p>元素的 transform 值不是 none.</p>
</li>
<li><p>元素 mix-blend-mode 值不是 normal.</p>
</li>
<li><p>元素的 filter 值不是 none.</p>
</li>
<li><p>元素的 isolation 值是 isolate.</p>
</li>
<li><p>will-change 指定的属性值为上面任意一个。</p>
</li>
<li><p>元素的 -webkit-overflow-scrolling 设为 touch.</p>
</li>
</ul>
<p>以 flex 举例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  .box &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .box &gt; .father &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .box &gt; .father &gt; .child &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: green;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div align="center">
<img src="/post/202107291101/css3.png" width="80%" height="80%">
</div>

<p>可以看到 <strong>child</strong> 并没有显示出来，实际运行你会发现，它在 child 的下层。此时 <strong>father</strong> 的 <strong>z-index: 1;</strong> 属性并没有生效。</p>
<p>给 .box 添加 <strong>display: flex;</strong></p>
<div align="center">
<img src="/post/202107291101/css4.png" width="80%" height="80%">
</div>

<p><strong>child</strong> 显示出来了！！！</p>
<p><strong>解释</strong>：</p>
<div align="center">
<img src="/post/202107291101/css5.png" width="80%" height="80%">
</div>

<p><strong>不生效</strong>：根据上图，未添加 flex 时，<strong>father</strong> 的 div 是普通元素, <strong>z-index: 1;</strong> 属性并没有生效。而 <strong>child</strong> 的 div是定位元素，且 <strong>z-index: -1;<strong>生效，根据上图，</strong>child</strong> 会在 <strong>block块状水平盒子</strong>下方。</p>
<p><strong>生效</strong>：根据 层叠上下文 的创建规则，<strong>flex 容器 的子元素,且子元素 z-index 值不为 auto</strong>, 符合条件，那么类名为<strong>father</strong>的 div 上会创建 层叠上下文, 此时 <strong>child</strong> 的展示就是在当前的 层叠上下文 元素 <strong>father</strong> 上，虽然 **z-index: -1;**，但是div上也没有其他元素，所以显示。</p>
<p><strong>tip</strong><br>查阅资料你会发现很多文档会强调，<strong>z-index 仅能在定位元素上奏效</strong>，，那是在 css2.1 的时候，现在是<strong>css3 的时代，非定位元素也能和z-index配合使用了</strong> 。</p>
<h3 id="层叠上下文元素的特性"><a href="#层叠上下文元素的特性" class="headerlink" title="层叠上下文元素的特性"></a><strong>层叠上下文元素的特性</strong></h3><p>这是搬运 <strong>张鑫旭</strong> 的</p>
<ul>
<li>层叠上下文的层叠水平要比普通元素高</li>
<li>层叠上下文可以阻断元素的混合模式</li>
<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li>
<li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>
<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>以上就是最近对 CSS选择器优先级 与 层叠上下文 的学习和总结了，以前一直理解的都比较模糊，经过这次总结，理解就比较清晰了。个人觉得在具体写的时候一般不用刻意去考虑 css 的优先级 和 层叠上下文，但是在要做一些标准化的东西 和 解决 css 相关 bug 时候理不理解就显得非常重要。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity">MDN CSS 优先级</a></li>
<li><a href="https://juejin.cn/post/6844903709772611592">深入理解 CSS 选择器优先级</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">MDN 层叠上下文</a></li>
<li><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">深入理解CSS中的层叠上下文和层叠顺序</a></li>
</ul>
]]></content>
      <categories>
        <category>Study</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>css 盒模型与BFC</title>
    <url>/post/202107252055/</url>
    <content><![CDATA[<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a><strong>盒模型</strong></h2><span id="more"></span>

<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a><strong>分类</strong></h3><h4 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a><strong>标准盒模型</strong></h4><div align="center">
<img src="/post/202107252055/1.png" width="80%" height="80%">
</div>
包括 margin、border、padding、content，并且 content 部分不包含其他部分。width = content。

<h4 id="IE盒模型"><a href="#IE盒模型" class="headerlink" title="IE盒模型"></a><strong>IE盒模型</strong></h4><div align="center">
<img src="/post/202107252055/2.png" width="80%" height="80%">
</div>
组成和标准的盒模型相同，但是IE 盒子模型的 content 部分包含了 border 和 padding。width = border + padding + content。

<h3 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a><strong>如何设置</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box-sizing:conent-box; <span class="comment">// 标准盒模型</span></span><br><span class="line">box-sizing:border-box; <span class="comment">// ie盒模型</span></span><br></pre></td></tr></table></figure>
<p>非特殊情况应当使用标准的盒模型进行UI搭建，只需要在html文件中中声明 <strong>DOCTYPE</strong> ,浏览器(包括ie)就会默认使用标准盒模型进行解析。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a><strong>BFC</strong></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><p><strong>块格式化上下文（Block Formatting Context，BFC)：</strong> 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。这是 <strong>MDN</strong> 的解释。很是晦涩，看了一些资料个人的理解就是：一种 css 规则，满足 BFC 开启条件的元素区域，就会有 BFC 相关特性，因为比较有特点，所以被单独的定义出来。</p>
<h3 id="BFC-布局特点"><a href="#BFC-布局特点" class="headerlink" title="BFC 布局特点"></a><strong>BFC 布局特点</strong></h3><p>或者说如果触发了 BFC，那么区域内布局就会遵循以下规则</p>
<ul>
<li>BFC 区域内的布局会和外部隔离开，互不影响,（即 BFC 内部嵌套 BFC，内外也是互不影响的）。</li>
<li>BFC 区域内垂直方向上的相邻元素会发生 margin 重叠（即相邻元素距离只有一个 margin 值）</li>
<li>BFC 盒子的左边框紧挨着包含块的左边框，即使浮动元素也是如此 (float: right，就是靠右挨着)</li>
<li>BFC 计算高度时，浮动子元素也参与计算。（可以解决浮动元素导致的高度坍塌问题）</li>
<li>BFC 的区域不会与 float box 重叠。</li>
</ul>
<h3 id="BFC-触发方式"><a href="#BFC-触发方式" class="headerlink" title="BFC 触发方式"></a><strong>BFC 触发方式</strong></h3><ul>
<li>根元素，即 HTML 标签</li>
<li>float值为 left、right ( 也有说float不为none，我觉得这种说法不够严谨 )</li>
<li>定位元素：position 值为 absolute、fixed</li>
<li>overflow 值不为 visible，为 auto、scroll、hidden</li>
<li>display值为 flow-root、inline-block、flex、inline-flex、grid、inline-grid、table-cell、table-caption、table、inline-table </li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h3><p>基础样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0, user-scalable=no, width=device-width&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: block;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .flow-box &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">      <span class="comment">/* float: left; */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .flow-content &#123;</span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flow-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flow-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flow-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div align="center">
<img src="/post/202107252055/bfc1.png" width="80%" height="80%">
</div>
可以看到样式里设置了 margin: 10px ，但是最上和最下的边框并没有展示完全，靠左、margin发生了重叠，虽然看起来有一些 BFC 特点，但是这并不是 BFC，我猜测这可能和 html 标签会触发 BFC 有关。

<h4 id="触发-BFC，正确展示边框"><a href="#触发-BFC，正确展示边框" class="headerlink" title="触发 BFC，正确展示边框"></a><strong>触发 BFC，正确展示边框</strong></h4><p>如下设置 float: left ，触发 BFC</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flow-box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div align="center">
<img src="/post/202107252055/bfc2.png" width="80%" height="80%">
</div>
可以看到 margin 展示完全，相邻块发生了margin折叠。其他触发 BFC 的元素也能达到类似效果。

<h4 id="阻止margin重叠，完整展示边框"><a href="#阻止margin重叠，完整展示边框" class="headerlink" title="阻止margin重叠，完整展示边框"></a><strong>阻止margin重叠，完整展示边框</strong></h4><p>如果不想让边框发生重叠，只需要包裹一层 div，触发 BFC 产生独立区域 即可</p>
<div align="center">
<img src="/post/202107252055/bfc3.png" width="80%" height="80%">
</div>

<h4 id="清除浮动：解决浮动元素令父元素高度坍塌的问题"><a href="#清除浮动：解决浮动元素令父元素高度坍塌的问题" class="headerlink" title="清除浮动：解决浮动元素令父元素高度坍塌的问题"></a><strong>清除浮动：解决浮动元素令父元素高度坍塌的问题</strong></h4><p>计算BFC的高度时，浮动子元素也参与计算</p>
<div align="center">
<img src="/post/202107252055/bfc4.gif" width="80%" height="80%">
</div>

<h4 id="非浮动元素被浮动元素覆盖"><a href="#非浮动元素被浮动元素覆盖" class="headerlink" title="非浮动元素被浮动元素覆盖"></a><strong>非浮动元素被浮动元素覆盖</strong></h4><p>BFC的区域不会与float box重叠</p>
<div align="center">
<img src="/post/202107252055/bfc5.gif" width="80%" height="80%">
</div>

<h4 id="两栏适应布局"><a href="#两栏适应布局" class="headerlink" title="两栏适应布局"></a><strong>两栏适应布局</strong></h4><p>方法：给固定栏设置固定宽度，给不固定栏开启BFC，推荐使用 <strong>float-root</strong>。<br>原理：BFC的区域不会与float box重叠</p>
<div align="center">
<img src="/post/202107252055/bfc6.png" width="80%" height="80%">
</div>

<p>了解更多可以看这篇文章<a href="https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/?shrink=1#comments">张鑫旭</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">mdn</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/127187654">一次弄懂css的BFC</a></li>
<li><a href="https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/?shrink=1#comments">CSS深入理解流体特性和BFC特性下多栏自适应布局</a></li>
</ul>
<!-- 
### **知识点记录**

#### **简单描述一下 Babel 的编译过程？**
* [一口(很长的)气了解 babel](https://juejin.cn/post/6844903743121522701)
* [Babel 编译流程分析](https://zhuanlan.zhihu.com/p/296970431)
* [深入Babel，这一篇就够了](https://juejin.cn/post/6844903746804137991)
> Babel 最核心的包我们基本都认识了，@babel/cli 负责解析 babel 的命令，根据命令行中的参数做一些非核心的工作。，@babel/core 负责串起整个编译流程，包括生成配置，读取文件，解析为 AST，AST 转换，AST 生成代码。其中，@babel/parser 提供默认的 parse 方法用于解析，@babel/traverse 封装了对 AST 树的遍历和节点的增删改查操作。@babel/generator 提供给默认的 generate 方法用于代码生成。

>总的来说，编译的流程本身是比较清晰的，Babel 只负责串起整个流程，具体的编译工作由 Babel 插件完成，甚至核心的编译和生成流程也能通过插件的方式实现自定义，这样做的好处也是显而易见的，Babel 能非常快速的响应语言的变化。

#### **webpack**
[webpack打包原理 ? 看完这篇你就懂了 !](https://segmentfault.com/a/1190000021494964?utm_source=tag-newest)
#### **webpack 热更新原理**
#### **webpack loader 与 plugin差别**
[关于webpack的面试题](https://www.cnblogs.com/gaoht/p/11310365.html) -->]]></content>
      <categories>
        <category>Study</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>react native 中 webview 的使用场景</title>
    <url>/post/202106222100/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/react-native-webview/react-native-webview">官方</a> 的 webview 组件。<a href="https://github.com/react-native-webview/react-native-webview/blob/master/docs/Reference.md">API文档</a>。这里主要介绍一下使用场景</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install react-<span class="keyword">native</span>-webview</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a><strong>常规使用</strong></h3><p>作为一般的网页入口，传入 uri 链接。这里需要注意 android 环境下的 <strong>mixedContentMode</strong>，此参数允许加载 <strong>http</strong> 链接</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;WebView</span></span><br><span class="line"><span class="xml">    ref=&#123;ref =&gt; (this.webview = ref)&#125;</span></span><br><span class="line"><span class="xml">    source=</span><span class="template-variable">&#123;&#123; <span class="name">uri:</span> <span class="string">&#x27;https://www.baidu.com/&#x27;</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">    style=</span><span class="template-variable">&#123;&#123; <span class="name">flex:</span> <span class="number">1</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">    mixedContentMode=&quot;compatibility&quot; // Android: WebView 是否应该允许安全链接（https）页面中加载非安全链接（http）的内容,</span></span><br><span class="line"><span class="xml">/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作为登录入口场景"><a href="#作为登录入口场景" class="headerlink" title="作为登录入口场景"></a><strong>作为登录入口场景</strong></h3><blockquote>
<p>例如：一款 toB 的 app，面对很多家客户，每家客户都有自己的登录系统界面，并且客户要求接入自己的登录系统。</p>
</blockquote>
<p>这个时候就需要 webview 接入登录界面之后，进行一些 “值拦截”，进行登录状态判断。这里主要用到 webview 的 <strong>onNavigationStateChange</strong> 参数。她会实时回调网页导航信息的变化，例如下面</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;canGoBack&quot;</span>: <span class="literal">false</span>, <span class="attr">&quot;canGoForward&quot;</span>: <span class="literal">false</span>, <span class="attr">&quot;loading&quot;</span>: <span class="literal">true</span>, <span class="attr">&quot;navigationType&quot;</span>: <span class="string">&quot;other&quot;</span>, <span class="attr">&quot;target&quot;</span>: <span class="number">229</span>, <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要注意 <strong>url</strong> 字段，网页内部登录完成之后，后端可以发一起一个重定向，前端关注 url 变化，进行登录状态的判断，同时重定向的 url 中可以拼接一些登录信息字段，用于前端登录状态校验等，例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com ? sessionId=xxx &amp; username= xxx&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="功能模块嵌入"><a href="#功能模块嵌入" class="headerlink" title="功能模块嵌入"></a><strong>功能模块嵌入</strong></h3><p>将 webview 作为功能模块载体，这个时候就会涉及到用户交互，需要 rn 与 h5 进行值的互相传递。此时就要react native 向 web 中注入 js，web 也可以主动回传数据到 react native。</p>
<p>webview 组件提供了 <strong>injectedJavaScript</strong> 用于向 h5 注入js，在 h5 相关方法中使用 <strong>window.ReactNativeWebView.postMessage</strong> 可见进行主动的回调，并且在 webview 的 <strong>onMessage</strong> 中进行字段的监听，以此就可以完成 react 和 h5 的交互。</p>
<p>示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> injectJSStr = <span class="string">`</span></span><br><span class="line"><span class="string">  window.injectStr=&#x27;我是注入的字段&#x27;;</span></span><br><span class="line"><span class="string">  var div = document.getElementById(&#x27;testID&#x27;);</span></span><br><span class="line"><span class="string">  div.style.color=&#x27;red&#x27;;</span></span><br><span class="line"><span class="string">  div.style.fontSize=&#x27;100px&#x27;;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;script&gt;</span></span><br><span class="line"><span class="string">        setTimeout(function () &#123;</span></span><br><span class="line"><span class="string">          window.ReactNativeWebView.postMessage(window.injectStr)</span></span><br><span class="line"><span class="string">        &#125;, 2000)</span></span><br><span class="line"><span class="string">      &lt;/script&gt;</span></span><br><span class="line"><span class="string">      &lt;div id=&#x27;testID&#x27;&gt;Hello Word&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>&#125;&#125;&gt;</span><br><span class="line">    &lt;WebView</span><br><span class="line">        source=&#123;&#123;html&#125;&#125;</span><br><span class="line">        injectedJavaScript=&#123;injectJSStr&#125;</span><br><span class="line">        onMessage=&#123;<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        alert(event.nativeEvent.data);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure>
<p>demo 中，webview 使用的是硬编码的 html，通过 <strong>injectedJavaScript</strong>主动注入 了一段<strong>字符串</strong>类型的js代码，并且 html 中主动回传注入的字段，使用 onMessage 来监听回传内容。</p>
<p>注：一般我进行 js 注入的时候，都会将参数或者方法挂载在<strong>window</strong>对象上。如果 h5 想暴露一些方法给 RN 以注入 js 的方式调用，也可以挂载在 window 上。</p>
<h3 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a><strong>其他场景</strong></h3><p>从上一个示例中，扩展出来的业务场景，例如想使用 webview 显示 <strong>富文本</strong>，只需要向<strong>source</strong>字段赋值即可。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><p><a href="https://github.com/lianglei777/demos/tree/RNFaceDemo">DEMO</a>，<br>主要关注 WebviewDemo.js 文件</p>
]]></content>
      <categories>
        <category>Study</category>
        <category>Work</category>
      </categories>
      <tags>
        <tag>Work</tag>
        <tag>ReactNative</tag>
      </tags>
  </entry>
  <entry>
    <title>react native 封装人脸 检测、美颜组件</title>
    <url>/post/202106201752/</url>
    <content><![CDATA[<p><strong>本组件目前只能用在React Native 的iOS端</strong></p>
<blockquote>
<p>本组件来之实际中的开发需求：可以检测并且标记人脸，实现基本的美颜，可进行拍照、换行镜头等基础相机功能。官方组件封装 <a href="https://www.react-native.cn/docs/native-components-ios">教程</a></p>
</blockquote>
<span id="more"></span>
<p><strong>本文代码：<a href="https://github.com/lianglei777/demos/tree/RNFaceDemo">DEMO</a></strong><br>运行demo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/lianglei777/demos.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> demos</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout RNFaceDemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> RNFaceDemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ios</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> pod install</span></span><br></pre></td></tr></table></figure>
<p>如果 pod install 失败，请参考 <a href="http://localhost:4000/post/202106131117/">此文</a> 的 cocoapods 部分。</p>
<h3 id="组件功能"><a href="#组件功能" class="headerlink" title="组件功能"></a><strong>组件功能</strong></h3><ul>
<li>人脸标记，返回人脸个数</li>
<li>滤镜美颜（基于GPUImage），美颜程度可调节（0~9）</li>
<li>相机功能，包括拍照、转换前后镜头，其余相机功能可自行扩展</li>
</ul>
<p>效果如下图</p>
<div align="center">
<img src="/post/202106201752/1.png" width="20%" height="20%">
</div>

<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a><strong>如何使用</strong></h3><h4 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a><strong>代码文件</strong></h4><ol>
<li>添加 ios 文件夹下的 <strong>Camera</strong> 到自己项目的 ios 目录下，</li>
<li>ios中添加相关相机相册权限配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCameraUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>上传头像时，使用您的相机来拍摄照片<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSPhotoLibraryAddUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>保存图片时,使用您的相册来保存照片<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>上传头像时，使用您的相册来获取图片<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>js 层使用参考 <strong>NativeModule/RNFaceDetectView.js</strong> 和 <strong>Pages/ComponentBridgeDemo.js</strong></li>
</ol>
<h4 id="安装GPUImage"><a href="#安装GPUImage" class="headerlink" title="安装GPUImage"></a><strong>安装GPUImage</strong></h4><p><strong>Podfile</strong> 文件中添加如下内容， 运行 pod install</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">pod <span class="string">&#x27;GPUImage&#x27;</span>,:<span class="function"><span class="params">git</span> =&gt;</span> <span class="string">&#x27;https://github.com/lianglei777/GPUImage.git&#x27;</span></span><br></pre></td></tr></table></figure>

<p>cmd + b 进行编译，如果遇到以下问题</p>
<h5 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a><strong>错误1</strong></h5><div align="center">
<img src="/post/202106201752/error1.png" width="80%" height="80%">
</div>

<p>解决方法：<br>按照如下途中点击步骤，添加 libGPUImage.a 文件</p>
<div align="center">
<img src="/post/202106201752/fix1.png" width="80%" height="80%">
</div>

<h5 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a><strong>错误2</strong></h5><div align="center">
<img src="/post/202106201752/error2.png" width="80%" height="80%">
</div>

<p>解决方法：<br>Build Settings –》 Library Search Paths ，<strong>双击</strong>添加 “${PODS_CONFIGURATION_BUILD_DIR}/GPUImage”，选择 non-recursive</p>
<div align="center">
<img src="/post/202106201752/fix2.png" width="80%" height="80%">
</div>

<div align="center">
<img src="/post/202106201752/fix3.png" width="80%" height="80%">
</div>




<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>代码中已经加了比较多的注释，这里主要根据文件来说一些我觉得要关注的点。</p>
<h4 id="GPUImage"><a href="#GPUImage" class="headerlink" title="GPUImage"></a><strong>GPUImage</strong></h4><p><a href="FSKGPUImageBeautyFilter">GPUImage</a> 是一款利用GPU添加滤镜效果，美化图像的 Object-C 库，但是可惜的是 swift 出现之后作者放弃维护了，需要修改一些代码才能运行在较新的iOS版本中，<a href="https://github.com/lianglei777/GPUImage">这里</a>是我修改之后的 GPUImage 库，也是组件中在用的</p>
<h4 id="FSKGPUImageBeautyFilter"><a href="#FSKGPUImageBeautyFilter" class="headerlink" title="FSKGPUImageBeautyFilter"></a><strong>FSKGPUImageBeautyFilter</strong></h4><p>FSKGPUImageBeautyFilter 是基于 <a href="FSKGPUImageBeautyFilter">GPUImage</a> 的美颜滤镜，可以通过三个维度调整美颜效果。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 美颜程度 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> beautyLevel;</span><br><span class="line"><span class="comment">/** 美白程度 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> brightLevel;</span><br><span class="line"><span class="comment">/** 色调强度 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> toneLevel;</span><br></pre></td></tr></table></figure>

<p>这里需要注意 FSKGPUImageBeautyFilter.m 文件中 initWithFragmentShaderFromString 的定义方式，<strong>传入的着色器参数如果不懂相关内容请不要修改，也不要为了代码美观去添加空格个或则换行</strong>, 这都是我踩过的大坑，目前的代码都是调试验证过的，没有问题放心使用。</p>
<h4 id="RCTFaceDetectView"><a href="#RCTFaceDetectView" class="headerlink" title="RCTFaceDetectView"></a><strong>RCTFaceDetectView</strong></h4><p>这里是封装组件的主要代码</p>
<p><strong>RCTFaceDetectView.h</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 js 组件中使用的回调方法, 必须使用 RCTBubblingEventBlock 来定义</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)RCTBubblingEventBlock onFaceCallback;</span><br><span class="line"><span class="comment">//传入的美颜参数</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)<span class="built_in">NSString</span> *beautyLevel;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance; <span class="comment">// 单例</span></span><br><span class="line">- (<span class="built_in">UIView</span> *)initBeautifyFaceView;  <span class="comment">// 初始化相机界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相机切换前后摄像头</span></span><br><span class="line">- (<span class="keyword">void</span>)switchCameraFrontOrBack;</span><br><span class="line"><span class="comment">//拍照</span></span><br><span class="line">-(<span class="keyword">void</span>)takeFaceDetectCamera:(RCTResponseSenderBlock)successBlock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置美颜系数</span></span><br><span class="line">-(<span class="keyword">void</span>)setBeautyLevel:(<span class="built_in">NSString</span> *)level;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止相机捕捉</span></span><br><span class="line">-(<span class="keyword">void</span>)stopCamera;</span><br></pre></td></tr></table></figure>

<p>此处需要注意</p>
<ul>
<li><p>onFaceCallback 是在 js 组件中使用的回调方法，必须使用 RCTBubblingEventBlock 定义，beautyLevel 是 prop 传参，使用正常类型就可以</p>
</li>
<li><p>switchCameraFrontOrBack、takeFaceDetectCamera、stopCamera 是组件的功能方法，之前由于需求的原因，没有封装为组件的传参方法，可以自定义相关调用方法暴露到 js 中，暴露方法<a href="https://lianglei777.github.io/post/202106131117/#more">参考</a> 中原生方法的封装。写法如下:</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> <span class="selector-tag">-</span> 人脸检测相机：拍照回调拍照图片<span class="selector-tag">base64</span></span><br><span class="line"><span class="selector-tag">RCT_REMAP_METHOD</span>(takeFaceDetectCameraWithCallback,<span class="attribute">takeFaceDetectCamera</span>:(RCTResponseSenderBlock)successBlock)&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="selector-attr">[[RCTFaceDetectView sharedInstance]</span> <span class="selector-tag">takeFaceDetectCamera</span>:<span class="selector-tag">successBlock</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> <span class="selector-tag">-</span> 人脸检测相机：前后摄像头切换</span><br><span class="line"><span class="selector-tag">RCT_REMAP_METHOD</span>(switchCameraFrontOrBack,switchCameraFrontOrBack)&#123;</span><br><span class="line">  <span class="selector-tag">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="selector-attr">[[RCTFaceDetectView sharedInstance]</span> <span class="selector-tag">switchCameraFrontOrBack</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> <span class="selector-tag">-</span> 人脸检测相机：美颜系数</span><br><span class="line"><span class="selector-tag">RCT_REMAP_METHOD</span>(setFilterLevel,<span class="attribute">setBeautyLevel</span>:(float)level)&#123;</span><br><span class="line">  <span class="selector-tag">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="selector-attr">[[RCTFaceDetectView sharedInstance]</span> <span class="selector-tag">setBeautyLevel</span>: <span class="selector-attr">[NSString stringWithFormat:@<span class="string">&quot;%f&quot;</span>,level]</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> <span class="selector-tag">--</span>停止视频流<span class="selector-tag">--</span></span><br><span class="line"><span class="selector-tag">RCT_EXPORT_METHOD</span>(stopFaceDetectCamera) &#123;</span><br><span class="line">   <span class="selector-attr">[[RCTFaceDetectView sharedInstance]</span> <span class="selector-tag">stopCamera</span>];</span><br><span class="line">   <span class="selector-attr">[[RCTFaceDetectView sharedInstance]</span> <span class="selector-tag">unobserveGlobalNotifications</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>RCTFaceDetectView.m</strong></p>
<h4 id="要点介绍"><a href="#要点介绍" class="headerlink" title="要点介绍"></a><strong>要点介绍</strong></h4><h5 id="如何获取到人脸相关的参数"><a href="#如何获取到人脸相关的参数" class="headerlink" title="如何获取到人脸相关的参数"></a><strong>如何获取到人脸相关的参数</strong></h5><p>需要实现ios的代理方法，如下 </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> <span class="selector-tag">-</span> <span class="selector-tag">AVCaptureMetadataOutputObjectsDelegate</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">captureOutput</span>:(AVCaptureOutput *)<span class="selector-tag">captureOutput</span> <span class="selector-tag">didOutputMetadataObjects</span>:(NSArray *)<span class="selector-tag">metadataObjects</span> <span class="selector-tag">fromConnection</span>:(AVCaptureConnection *)<span class="selector-tag">connection</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>metadataObjects</strong> 参数中即包含了面部个数以及面部在摄像头中的坐标位置。</p>
<h5 id="如何绘制面部框"><a href="#如何绘制面部框" class="headerlink" title="如何绘制面部框"></a><strong>如何绘制面部框</strong></h5><p>此处需要进行坐标转换，将面部在摄像头中的坐标转为在屏幕中的坐标，此处需要使用 <strong>transformedMetadataObjectForMetadataObject</strong> 方法，具体请查看代码</p>
<h5 id="如何进行美颜"><a href="#如何进行美颜" class="headerlink" title="如何进行美颜"></a><strong>如何进行美颜</strong></h5><p>在 GPUImage 中使用 FSKGPUImageBeautyFilter 滤镜，常规写法。</p>
<h3 id="RCTFaceDetectViewManager"><a href="#RCTFaceDetectViewManager" class="headerlink" title="RCTFaceDetectViewManager"></a><strong>RCTFaceDetectViewManager</strong></h3><p>将 RCTFaceDetectView 封装的原生组件，暴露到 js 层</p>
<p><strong>更多内容运行 demo，阅读代码</strong></p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a><strong>后话</strong></h3><p>在写这篇文章的时候，本计划尽量写得详细，但是实际写的过程，有些东西如果细写我就觉得很啰嗦，所以写得时候就采用简略要点的形式。代码中注释很多，只要仔细阅读，就可以看明白和使用起来。</p>
<p>记得当初做这个需求的时候，花了将近两周的时间，去调研，去开发。如何获取面部数据以及如何进行面部绘制、如何实现滤镜美颜、如何进行iOS原生组件封装、以及如何将这些功能组合在一起。当时并没有找到合适的开源组件或者demo进行参照，就是靠分析功能点、逐步开发组合起来的，写出来之后还是成就感满满的。</p>
<p>请原谅只有 iOS 组件，因为我并不熟悉 Android。</p>
]]></content>
      <categories>
        <category>Study</category>
        <category>Work</category>
      </categories>
      <tags>
        <tag>Work</tag>
        <tag>ReactNative</tag>
      </tags>
  </entry>
  <entry>
    <title>react native的js与ios的值传递</title>
    <url>/post/202106131117/</url>
    <content><![CDATA[<blockquote>
<p>之前做了快两年的react native相关的app开发工作，也做了一些比较有趣的事情。一直想写些东西记录一下，文章会努力回忆一些之前遇到的困惑，尽量以demo的形式体现出来，demo是在<strong>ios</strong>端环境下。</p>
</blockquote>
<span id="more"></span>

<h3 id="本文代码：DEMO"><a href="#本文代码：DEMO" class="headerlink" title="本文代码：DEMO"></a><strong>本文代码：<a href="https://github.com/lianglei777/demos/tree/RNFaceDemo">DEMO</a></strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 运行demo</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/lianglei777/demos.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> demos</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout RNFaceDemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> RNFaceDemo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ios</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> pod install</span></span><br></pre></td></tr></table></figure>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h3><p>这里主要说一下我环境搭建的时候遇到的问题</p>
<p><strong>react-native 基础环境搭建可以参考 <a href="https://www.react-native.cn/docs/environment-setup">官网</a></strong></p>
<h4 id="cocoapods"><a href="#cocoapods" class="headerlink" title="cocoapods"></a><strong>cocoapods</strong></h4><p>ios的 <a href="https://cocoapods.org/">cocoapods</a> 安装以及相关命令 pod install 可能需要<strong>科学上网</strong>，不然大概率会失败，也可以考虑换源，方法如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ cd ~/.cocoapods/repos </span><br><span class="line">$ pod repo remove master</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 清华源 --&gt;</span></span><br><span class="line">$ git clone https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git master</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 北京外国语大学，我目前在用的 --&gt;</span></span><br><span class="line">$ git clone https://mirrors.bfsu.edu.cn/git/CocoaPods/Specs.git master</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- gitclub --&gt;</span></span><br><span class="line">$ git clone https://gitclub.cn/CocoaPods/Specs.git master</span><br></pre></td></tr></table></figure>

<h4 id="目前开发的环境"><a href="#目前开发的环境" class="headerlink" title="目前开发的环境"></a><strong>目前开发的环境</strong></h4><p>在安装环境的的时候，我确实感觉到了不同mac系统版本，带来的差异（以前的demo运行不起来了），这里贴一下目前的开发环境</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">macOS</span>: <span class="number">12</span>.<span class="number">0</span> Beta版 Monterey</span><br><span class="line"><span class="attribute">Node</span>: <span class="number">14</span>.<span class="number">16</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Xcode</span>： <span class="number">12</span>.<span class="number">5</span> </span><br><span class="line"><span class="attribute">cocoapods</span>：<span class="number">1</span>.<span class="number">10</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>PS：我觉得 react native 的开发环境搭建对新手来说也是一道坎，特别是没有 iOS 或者 android 开发经验的，请务必仔细阅读 <a href="https://www.react-native.cn/docs/environment-setup">官网</a> 的教程。</p>
<h3 id="js-主动传参调用-ios-原生定义的方法，并且返回参数到-js"><a href="#js-主动传参调用-ios-原生定义的方法，并且返回参数到-js" class="headerlink" title="js 主动传参调用 ios 原生定义的方法，并且返回参数到 js"></a><strong>js 主动传参调用 ios 原生定义的方法，并且返回参数到 js</strong></h3><p>ios 项目下 创建 RNManager 类文件，react native 原生桥接的组件和方法，默认文件名都需要以 <strong>Manager</strong> 结尾。文件内容如下：</p>
<p>RNManager.h</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridge.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTConvert.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 必须继承 RCTBridgeModule 协议，并且导入必要的头文件</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RNManager</span> : <span class="title">NSObject</span>&lt;<span class="title">RCTBridgeModule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>RNManager.m</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;RNManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;AppDelegate.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RNManager</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. .m文件中添加此方法，才能将类暴露给 RN</span></span><br><span class="line">RCT_EXPORT_MODULE();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 此方法是决定桥接的方法运行在那个线程上，一般是主线程，如果涉及到UI变化，那么久必须是主线程</span></span><br><span class="line">- (<span class="built_in">dispatch_queue_t</span>)methodQueue &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_main_queue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. RCT_REMAP_METHOD 就是实现桥接的方法</span></span><br><span class="line"><span class="comment">// sendMegToNative: 在rn中使用的方法名称</span></span><br><span class="line"><span class="comment">// one,two,three,successCallBack,errorCallBack 是传参</span></span><br><span class="line"><span class="comment">// 类似sendMegToNative(one,two,three, (success) =&gt; &#123;&#125;, (error) =&gt; &#123;&#125;), </span></span><br><span class="line"><span class="comment">// 普通类型需要使用ios写法，对应js就是 字符串、数字、bool等。传参是方法 需要是 RCTResponseSenderBlock 类型, 回调参数必须使用 数组 包裹，内容类型参考 iOS 语法。</span></span><br><span class="line"><span class="comment">// 如果想在使用 promise 类型的回调方法，可以使用 RCTPromiseResolveBlock、RCTPromiseRejectBlock 类型, 注意： callback 和 promise 不能混用，</span></span><br><span class="line">RCT_REMAP_METHOD(sendMegToNative, :(<span class="built_in">NSString</span> *)one :(<span class="built_in">NSString</span> *)two :(<span class="built_in">NSString</span> *)three :(RCTResponseSenderBlock)successCallBack :(RCTResponseSenderBlock)errorCallBack )&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">NSString</span> *title = one;</span><br><span class="line">  <span class="built_in">NSString</span> *message = two;</span><br><span class="line">  <span class="built_in">NSString</span> *cancelButtonTitle = <span class="string">@&quot;取消&quot;</span>;</span><br><span class="line">  <span class="built_in">NSString</span> *otherButtonTitle = <span class="string">@&quot;确定&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:title message:message preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">     </span><br><span class="line">  <span class="built_in">UIAlertAction</span> *cancelAction = [<span class="built_in">UIAlertAction</span> actionWithTitle:cancelButtonTitle style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> *action) &#123;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">if</span>(!errorCallBack)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调字符串</span></span><br><span class="line">    errorCallBack(@[<span class="string">@&quot;我不学&quot;</span>]);</span><br><span class="line">    </span><br><span class="line">  &#125;];</span><br><span class="line">     </span><br><span class="line">  <span class="built_in">UIAlertAction</span> *otherAction = [<span class="built_in">UIAlertAction</span> actionWithTitle:otherButtonTitle style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> *action) &#123;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">if</span>(!successCallBack)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调对象类型</span></span><br><span class="line">    successCallBack(@[@&#123;<span class="string">@&quot;result&quot;</span> : <span class="string">@&quot;连夜学&quot;</span>&#125;]);</span><br><span class="line">    &#125;];</span><br><span class="line">     </span><br><span class="line">  [alertController addAction:cancelAction];</span><br><span class="line">  [alertController addAction:otherAction];</span><br><span class="line">  </span><br><span class="line">  AppDelegate *delegate = (AppDelegate *)[<span class="built_in">UIApplication</span> sharedApplication].delegate;</span><br><span class="line">  [delegate.window.rootViewController presentViewController:alertController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意点请关注上面的 1、2、3、4 点。具体的方法实现就是正常的 object-c 语法。下面是  js 中调用</p>
<p>FunctionBridgeDemo.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  Button,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  NativeModules,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处 RNManager 就是 ios中桥接的 RNManager 对象名称</span></span><br><span class="line"><span class="keyword">const</span> &#123; RNManager &#125; = NativeModules;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionBridgeDemo</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  sendMsgToNative = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 调用原生桥接的 sendMegToNative 的方法，传参、回调</span></span><br><span class="line">    RNManager.sendMegToNative(</span><br><span class="line">      <span class="string">&#x27;提醒一下&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;要学RN吗？&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;333&#x27;</span>,</span><br><span class="line">      result =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;success 返回 ==》&#x27;</span>, result);</span><br><span class="line">      &#125;,</span><br><span class="line">      error =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error 返回 ==》&#x27;</span>, error);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Button title=<span class="string">&quot;Hello Native&quot;</span> onPress=&#123;<span class="built_in">this</span>.sendMsgToNative&#125; /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上就是正常的 react native 中原生封装方法，在 js 层调用，如果想了解 promise 的封装方法，详见 demo 中相关方法的注释部分。</p>
<h3 id="原生主动发送消息给-js"><a href="#原生主动发送消息给-js" class="headerlink" title="原生主动发送消息给 js"></a><strong>原生主动发送消息给 js</strong></h3><p>通过封装监听事件来实现<br>ios项目下创建 EventEmitManager 类文件。</p>
<p>EventEmitManager.h</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTEventEmitter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承 RCTEventEmitter类 和 RCTBridgeModule 协议</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EventEmitManager</span> : <span class="title">RCTEventEmitter</span>&lt;<span class="title">RCTBridgeModule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EventEmitManager.m</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;EventEmitManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js 层需要监听通知时的key</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NATIVE_TO_RN_ONNOFIFICATION @<span class="meta-string">&quot;onNotification&quot;</span></span></span><br><span class="line"><span class="comment">// 原生发送通知时的key</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NATIVE_ONNOFIFICATION @<span class="meta-string">&quot;native_onNotification&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EventEmitManager</span></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> hasListeners;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line">RCT_EXPORT_MODULE()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露给js监听的key</span></span><br><span class="line">-(<span class="built_in">NSArray</span>*)supportedEvents &#123;</span><br><span class="line">  <span class="keyword">return</span>@[NATIVE_TO_RN_ONNOFIFICATION];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)nativeSendNotificationToRN:(<span class="built_in">NSNotification</span>*)notification &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;NativeToRN notification.userInfo = %@&quot;</span>, notification.userInfo);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (hasListeners) &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> sendEventWithName:NATIVE_TO_RN_ONNOFIFICATION body:notification.userInfo];</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写 startObserving，js 开始监听时，原生实现监听方法</span></span><br><span class="line">- (<span class="keyword">void</span>)startObserving &#123;</span><br><span class="line">  </span><br><span class="line">  hasListeners = <span class="literal">YES</span>;</span><br><span class="line">  </span><br><span class="line">  [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(nativeSendNotificationToRN:) name:NATIVE_ONNOFIFICATION object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写 stopObserving， js 删除监听时，原生删除相应的监听方法</span></span><br><span class="line">- (<span class="keyword">void</span>)stopObserving &#123;</span><br><span class="line"></span><br><span class="line">   hasListeners = <span class="literal">NO</span>;</span><br><span class="line">  </span><br><span class="line">  [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:NATIVE_ONNOFIFICATION object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上就定义了一个监听的方法类，可以发起监听和删除监听，相关内容都添加了注释，要注意其中监听的两个 <strong>key</strong> 字段，那如何去使用呢。</p>
<p>可以在ios项目的 <strong>AppDelegate.m</strong> 的声明周期方法中添加，相应的触发方法，如下</p>
<p>AppDelegate.m</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 前台进后台</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(<span class="built_in">UIApplication</span> *)application &#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@&quot;native_onNotification&quot;</span> object:<span class="literal">nil</span> userInfo:@&#123;<span class="string">@&quot;lifeState&quot;</span>: <span class="string">@&quot;WILL_GO_BACKGROUD&quot;</span>&#125;];</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>js 中实现</p>
<p>FunctionBridgeDemo.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eventEmitManagerEmitter = <span class="keyword">new</span> NativeEventEmitter(EventEmitManager);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.subscription = eventEmitManagerEmitter.addListener(</span><br><span class="line">    <span class="string">&#x27;onNotification&#x27;</span>,</span><br><span class="line">    reminder =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;监听 ==》&#x27;</span>, reminder);</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscription &amp;&amp; <span class="built_in">this</span>.subscription.remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 app 前台 进入后台时，会有相关监听的 log，一定要注意 <strong>key</strong> 的区分，详细内容请查看demo.</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>上述的两种传值方法其实在官网都能找到 <a href="https://www.react-native.cn/docs/native-modules-ios">位置</a>, 但是刚接触 RN 的同学，一般都只熟悉 原生 和 js 中的一种，这有时候就会有理解上的困惑，而且官网例子有时候又”不够详细”,照着官网写代码的时候无法达到想要的效果，比如第二点监听的写法，看官网写法，并不能应用到实际中来（最起码我是这样）。所以我demo代码尽量写的详细，尽让读者可以”抄”过去，简单改改就能用。</p>
]]></content>
      <categories>
        <category>Study</category>
        <category>Work</category>
      </categories>
      <tags>
        <tag>Work</tag>
        <tag>ReactNative</tag>
      </tags>
  </entry>
  <entry>
    <title>新工作用到的东西</title>
    <url>/post/202105192041/</url>
    <content><![CDATA[<h3 id="新工作用到的新东西记录一下"><a href="#新工作用到的新东西记录一下" class="headerlink" title="新工作用到的新东西记录一下"></a>新工作用到的新东西记录一下</h3><blockquote>
<p>换了工作，项目中用到了之前了解过但是没用过或者没听过的东西，这里记录一下，边学边填。<br>包括lerna、redux-saga，Immutable.js、video-react、re-resizable、Umi， 以及一些基础的html相关的api</p>
</blockquote>
<span id="more"></span>

<h4 id="Lerna"><a href="#Lerna" class="headerlink" title="Lerna"></a><strong><a href="https://github.com/lerna/lerna/">Lerna</a></strong></h4><blockquote>
<p>使用了 git + npm 管理多个前端项目存储库的工具。 vue、babel、react 都在用的 Monorepo 管理方式。</p>
</blockquote>
<ul>
<li><p>多个项目在一个目录下，每个项目都有各自的package.json, 根目录下执行 lerna bootstrap, lerna会将各个子项目的依赖下载，统一放在一个node_modules中（在根目录下）。</p>
</li>
<li><p>子项目可以使用一个脚手架。</p>
</li>
<li><p>可以单独给某个子项目添加依赖，也可以统一添加相同依赖。还可以将子项目a作为依赖加到子项目b中。</p>
</li>
<li><p>生成统一的changelog，统一的版本。</p>
</li>
</ul>
<p>学习链接： <a href="https://juejin.cn/post/6844903918279852046">掘金1</a></p>
<h4 id="redux、redux-saga"><a href="#redux、redux-saga" class="headerlink" title="redux、redux-saga"></a><strong><a href="https://redux.js.org/">redux</a>、<a href="https://github.com/hmillison/redux-saga">redux-saga</a></strong></h4><blockquote>
<p>redux: 前端的状态管理库。redux-saga: 在redux中使用异步方法的库</p>
</blockquote>
<ul>
<li><p>之前做RN的项目引入过 redux，使用过一段时间，但是后来觉得写法太繁琐，改用了基于redux封装的另一个状态管理库 <a href="https://github.com/rematch/rematch">rematch</a>, 这个库写法上会简便一些，不用定义 “ action “，个人觉得更好用。后来H5的项目使用了 <a href="https://github.com/mobxjs/mobx">mobx</a>，觉得mbox写法和理解上更易用了,很是喜欢。<strong>当然了简单易用只是一个方面，适合项目才是最好的</strong>，比如redux、rematch写法虽然繁琐，但是在多页面共享”状态”的时候，多交互、多数据源的时候，优势就很大，比如分权限的管理类网站。而mobx在写单页面应用的时候显的更方便易用，，比如手机上的H5应用，之前做过的 考勤类软件：”劳动力管理”，每个模块都是单独的页面功能，功能模块关联性不强。</p>
</li>
<li><p>redux-saga: 是目前项目新遇到的，之前没使用过。redux-saga 是一个 redux 中间件，主要是用于redux 的异步操作，使用了 es6的 Generator、yield，写起来没有回调地狱(就是异步嵌套)，目前看来主要用法，就提 redux-saga 提供的 call、put、take、take-every等不同场景的方法。<a href="https://redux-saga-in-chinese.js.org/docs/advanced/index.html">中文文档</a></p>
</li>
</ul>
<h4 id="Immutable-js"><a href="#Immutable-js" class="headerlink" title="Immutable.js"></a><strong><a href="https://github.com/immutable-js/immutable-js">Immutable.js</a></strong></h4>]]></content>
      <categories>
        <category>Study</category>
        <category>Work</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Work</tag>
      </tags>
  </entry>
  <entry>
    <title>离开苏州到合肥工作</title>
    <url>/post/202105060952/</url>
    <content><![CDATA[<h3 id="2021-5-从苏州到合肥的记录"><a href="#2021-5-从苏州到合肥的记录" class="headerlink" title="2021.5 从苏州到合肥的记录"></a><strong>2021.5 从苏州到合肥的记录</strong></h3><blockquote>
<p>离开苏州到合肥工作，主要记录一下搬家前后的大致经历</p>
</blockquote>
<span id="more"></span>

<h3 id="社保-amp-公积金"><a href="#社保-amp-公积金" class="headerlink" title="社保 &amp; 公积金"></a><strong>社保 &amp; 公积金</strong></h3><p><strong>社保</strong></p>
<p>医保可以去药店刷些补品、维生素、钙片之类的。网上查询苏州养老保险应该是可以转移到合肥的，具体还没有操作。其他的基本就带不走也花不掉了</p>
<p><strong>公积金</strong></p>
<p>苏州公积金是可提取的，但是要封存六个月，具体都可以在苏州公积金app上操作，网上查询也是可以转移到合肥的，具体还没有操作。</p>
<h3 id="简单的告别"><a href="#简单的告别" class="headerlink" title="简单的告别"></a><strong>简单的告别</strong></h3><p>在苏州工作生活了五年有余，很多过往都和苏州产生了联系，决定离开的时候自己心理上做好了准备，在合适的时间提了离职申请，然后告诉同事和朋友，我要离开苏州了。相约一个大家都有空的时间一起吃个饭，聊聊天。</p>
<h3 id="工作的交接"><a href="#工作的交接" class="headerlink" title="工作的交接"></a><strong>工作的交接</strong></h3><p>离职申请批准之后，主要就是准备工作的交接，因为距离离职日期还有一段时间，所以一边做开发任务，一边交接，写交接文档。逐渐将手上的jira任务、问题处理掉。离职前一周还是做了一个重要的功能需求，办理离职手续的上午配合测试将功能测试通过（给自己点赞👍）。走的时候工作各方面处理的也算圆满。</p>
<h3 id="租房"><a href="#租房" class="headerlink" title="租房"></a><strong>租房</strong></h3><p>先说几个角色</p>
<p><strong>租客</strong>：我</p>
<p><strong>中介机构</strong>：一般就是卖房机构，也做租房业务</p>
<p><strong>中介人员</strong>：属于中介机构的工作人员，主要就是负责租客带看、沟通等</p>
<p><strong>二房东</strong>：从业主那里整租一套房（一般五年左右），对房间进行改造隔间装修，例如将客厅隔成一间次卧，然后进行出租获利行为的人员机构。</p>
<p>在离职前两周就在豆瓣的合肥租房小组发了求租的帖子，但是反响平平。于是我专门从苏州到合肥租房子，期间住旅馆。这里说着重说一下租房经历。</p>
<ol>
<li>租房之前，以公司为圆心，以上班距离为半径 (ps:我是4km计算的) 确认一下租房范围，周围有哪些小区。</li>
<li>到了合肥，因为是傍晚到的，晚上比较空闲，这边共享电瓶车很方便，我就骑电瓶车在之前确认的租房范围转一转，主要就是看看小区周围的交通、饮食、购物等条件，缩小筛选范围。</li>
<li>第二天上午开始租房，我本意是想直接和房东租房，主要是想省去中介费，但是通过租房软件、和小区内告示几乎联系不上房东，<strong>高新区的租房基本都被中介机构和二房东垄断了</strong>，耗去了上午的时间。下午开始联系租房软件上的二房东租房公司、中介，多打了几个电话，大致了解了这边中介的租房价位。</li>
<li>联系中介实地看房子，主要就是看价格和租房是否匹配，不要怕麻烦，多看几家，<ul>
<li>问清楚支付方式，例如押一付一、押一付三。</li>
<li>水电怎么计费，例如是否是商用水电、是自己网上缴费还是租房公司统一收费。</li>
<li>看小区新旧，房间的生活设施是否齐全例如热水器、空调、洗衣机、煤气等等。</li>
</ul>
</li>
</ol>
<p>看了一下午，已经有两间中意的房子，和中介说第二天给答复。晚上的时候中介推荐给我了一间价格比较低但是条件很好的房间，我不太相信，但是中介信誓旦旦，相约了第三天早上去看一下。第三天看了，我和中介人员确认价格没说错吧，中介确定，我决定要租，让中介机构约二房东签合同，这时候翻转来了，中介机构联系二房东的时候反馈说之前价格说错了，价格少说三百块，我思量了一下，还是可以租，然后又翻转了，之前确认还是错的，少说了五十块，然后我就生气了，开始怼中介，让他们去谈价格，我和中介任意又去另外一个地方看了一处出租房。因为还有其他事情，晚上要回苏州，思考了一下，还是准备租翻转价格的那间房。价格说下去二十块，中介费我砍去一半，押一付三。</p>
<p>这个大致就是我的租房过程，说的尽量简洁了，过程比较痛苦（那两天天气热，刮大风，导致眼睛和喉咙都不舒服），回想起来比较有趣的就是租客、中介、中介机构、二房东之间关系利益的博弈（这个词可能不太恰当），难听一点就是扯皮，就不详细解释了。总体来说租房还算满意，吃点小亏。</p>
<p><strong>给大家的租房建议就是，先看自己租房预算。朋友一起合租就尽量找房东或者中介租整套房的，再均摊，会实惠一些。个人的话怕麻烦，就直接找中介或者直接找二房东吧，多花点钱，房间价位选择也多。多和中介、房东问些信息，少踩坑。签租房合同的时候，看仔细点，条款是否都同意，也不要少写了，不满意的点要改，不要不好意思。</strong></p>
<h3 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a><strong>搬家</strong></h3><p>先把自己的东西整理一下，需要带走的带走，有价值的舍不得扔的就送人或者咸鱼打折卖掉，该丢的就丢掉，自己酌情处理。</p>
<p>我是先在网上买了纸箱子（快递小哥也有）、压缩袋。整理的时候一定要做好分类，例如衣服可以按季节分、被子按薄厚分、杂物可以直接放一个纸盒子里，不好打包的可以让快递小哥帮忙打包。其实说起来挺简单，但是整理起来很花时间…</p>
<p>分类打包好放纸箱子里，预约快递小哥上门取件，急着要用的东西走顺丰，比如被子（不然到新住处没法睡觉😂），不着急的走圆通等（价格会低一些），日常用的衣服牙刷等可以放箱子里自己带走。</p>
<p>联系苏州的房东，退房清算、退押金。联系苏州的合租舍友，分摊苏州租房费用。</p>
<p>然后晚上离开苏州，虽然之前做好了心理准备，但是直到走的那一刻，脑海中还是思绪万千，画面翻滚，甚至热泪盈眶…</p>
<h3 id="住在合肥"><a href="#住在合肥" class="headerlink" title="住在合肥"></a><strong>住在合肥</strong></h3><p>当天晚上租了一晚旅店，第二天被子还没到，只能买床被子开空调在出租屋先顶一晚（其实顶了两晚😳, 五一旅馆价格太高了！！QAQ），期间主要就是打扫房间，买日常用到的各种生活用品。为了方便上下班，还在考虑买一辆电瓶车。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>一个人跨城市搬家是一件很累很繁琐的事情，需要各种沟通协调，会有很多额外的必要支出，前后花费了一周的时间。但是既然选择了这里，也来到了这里，那就要做好，无论是工作还是生活,就先写到这里吧。</p>
]]></content>
      <categories>
        <category>Life</category>
        <category>合肥</category>
      </categories>
      <tags>
        <tag>搬家</tag>
      </tags>
  </entry>
  <entry>
    <title>使用React + Webpack搭建应用</title>
    <url>/post/202104132231/</url>
    <content><![CDATA[<h3 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a><strong>初衷</strong></h3><blockquote>
<p>日常学习的时候写的demo和练习都比较零散，不好整理。就想写一个完整的项目代码记录它们，容易查找，比对。</p>
</blockquote>
<p><strong>想法</strong></p>
<ul>
<li>使用 webpack + react + mobx + antd 搭建。</li>
<li>尽可能使用最新的库、最新的语法。</li>
<li>会去做优化，遇到的坑和优化方法记录下来。</li>
<li>尽量定期升级，尝试我想写其他东西，例如hooks写法，typescript等等</li>
<li>未完待续<span id="more"></span></li>
</ul>
<h3 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a><strong>代码仓库</strong></h3><p>GitHub ： <a href="https://github.com/lianglei777/luffy">luffy</a></p>
<blockquote>
<p>仓库名称luffy，与 ONE PIECE（海贼王）的主角同名，意为逆风起航</p>
</blockquote>
<p>详细配置请参考项目代码</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a><strong>创建</strong></h3><p>简要的创建步骤，参考 <a href="https://webpack.docschina.org/guides/getting-started/#basic-setup">webpack</a> 相关教程。</p>
<h3 id="第一阶段的配置"><a href="#第一阶段的配置" class="headerlink" title="第一阶段的配置"></a><strong>第一阶段的配置</strong></h3><h3 id="第一阶段的配置文件"><a href="#第一阶段的配置文件" class="headerlink" title="第一阶段的配置文件"></a><strong>第一阶段的配置文件</strong></h3><p><strong>package.json配置</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;luffy&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&gt;  与 ONE PIECE（海贼王） 的主角同名，意为逆风起航&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --config webpack.common.js --progress &quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.common.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;git+https://github.com/lianglei777/luffy.git&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/lianglei777/luffy/issues&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span>: <span class="string">&quot;https://github.com/lianglei777/luffy#readme&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^5.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^5.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^5.32.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.11.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.13.15&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.13.15&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-react&quot;</span>: <span class="string">&quot;^7.13.13&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>webpack配置</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 开发环境 development、production</span></span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    devtool: <span class="string">&#x27;inline-source-map&#x27;</span>, <span class="comment">// 生产环境关掉</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">9000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;index.js&#x27;</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        clean: <span class="literal">true</span>, <span class="comment">// 每次打包前自动清理dist文件夹</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(js|jsx)?$/</span>,</span><br><span class="line">                <span class="comment">// 开启缓存</span></span><br><span class="line">                options: &#123;</span><br><span class="line">                    cacheDirectory: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">                type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class="line">                type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">// html模板的生成路径, 文件名称,  路径基于 output 中的path 路径</span></span><br><span class="line">            template: path.resolve(<span class="string">&#x27;./index.html&#x27;</span>), <span class="comment">//html模板, 从根目录开始</span></span><br><span class="line">            inject: <span class="literal">true</span>, <span class="comment">// true：默认值，script标签位于html文件的 body 底部</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>第一阶段配置解释</strong></p>
<h4 id="devDependencies、dependencies"><a href="#devDependencies、dependencies" class="headerlink" title="devDependencies、dependencies"></a><strong>devDependencies、dependencies</strong></h4><p>devDependencies：仅在开发环境需要用的库, 安装命令:npm install xxx -D 或者 npm install xxx –save-dev。<br>dependencies：生产环境需要用到的库，安装命令:npm install xxx -S 或者 npm install xxx –save。</p>
<h4 id="webpack、webpack-cli-与-react、react-dom"><a href="#webpack、webpack-cli-与-react、react-dom" class="headerlink" title="webpack、webpack-cli 与 react、react-dom"></a><strong>webpack、webpack-cli 与 react、react-dom</strong></h4><p>webpack、webpack-cli：支持webpack的依赖库<br>react、react-dom：支持react的的依赖库</p>
<h4 id="babel-loader、-babel-core-、-babel-preset-env-、-babel-preset-react"><a href="#babel-loader、-babel-core-、-babel-preset-env-、-babel-preset-react" class="headerlink" title="babel-loader、@babel/core 、 @babel/preset-env 、 @babel/preset-react"></a><strong>babel-loader、@babel/core 、 @babel/preset-env 、 @babel/preset-react</strong></h4><p>浏览器无法直接识别reactjs，babel等插件可以将jsx语法以及es6语法解析为最基础的js，可运行在浏览器, <a href="https://babeljs.io/">babel官网</a>。需要在.babelrc文件中和webpack配置文件中添加配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc 文件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;targets&quot;</span>: &#123;</span><br><span class="line">              <span class="comment">// 大于相关浏览器版本无需用到 preset-env</span></span><br><span class="line">            <span class="attr">&quot;edge&quot;</span>: <span class="number">17</span>,</span><br><span class="line">            <span class="attr">&quot;firefox&quot;</span>: <span class="number">60</span>,</span><br><span class="line">            <span class="attr">&quot;chrome&quot;</span>: <span class="number">67</span>,</span><br><span class="line">            <span class="attr">&quot;safari&quot;</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="comment">// 兼容到android4 ios6</span></span><br><span class="line">            <span class="attr">&quot;browsers&quot;</span>: [<span class="string">&quot;Android &gt;= 4.0&quot;</span>, <span class="string">&quot;ios &gt;= 6&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   ],</span><br><span class="line">    <span class="string">&quot;@babel/preset-react&quot;</span></span><br><span class="line">],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack 配置文件</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(js|jsx)?$/,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    cacheDirectory: true</span><br><span class="line">                &#125;,</span><br><span class="line">                loader: &#x27;babel-loader&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h4 id="css-loader、style-loader"><a href="#css-loader、style-loader" class="headerlink" title="css-loader、style-loader"></a><strong>css-loader、style-loader</strong></h4><p>用于解析css文件，应保证 loader 的先后顺序：’style-loader’ 在前，而 ‘css-loader’ 在后。如果不遵守此约定，webpack 可能会抛出错误。配置比较简单就不贴了</p>
<h4 id="html-webpack-plugin、webpack-dev-server"><a href="#html-webpack-plugin、webpack-dev-server" class="headerlink" title="html-webpack-plugin、webpack-dev-server"></a><strong>html-webpack-plugin、webpack-dev-server</strong></h4><p>html-webpack-plugin：可以在webpack环境下运行或者打包的时候自动创建html文件，并且自动引入相关js文件，具体配置见<a href="https://github.com/jantimon/html-webpack-plugin">官网</a><br>webpack-dev-server: 可以在webpack环境下起一个实时监听代码变化的server，并且当前运行代码，具体配置见<a href="https://github.com/webpack/webpack-dev-server">官网</a></p>
<h4 id="start-与-build-命令"><a href="#start-与-build-命令" class="headerlink" title="start 与 build 命令"></a><strong>start 与 build 命令</strong></h4><p>这里主要强调一下webpack版本在v5及以上时，start运行命令发生的了变化。 webpack-dev-server 启动server变为 webpack serve，具体看此 <a href="https://github.com/webpack/webpack-dev-server/issues/2759">issue</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    <span class="comment">// &quot;start&quot;: &quot;webpack-dev-server --config webpack.common.js --progress &quot;,</span></span><br><span class="line">    &quot;start&quot;: &quot;webpack serve --config webpack.common.js --progress &quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="第二阶段配置"><a href="#第二阶段配置" class="headerlink" title="第二阶段配置"></a><strong>第二阶段配置</strong></h3><h4 id="引入less"><a href="#引入less" class="headerlink" title="引入less"></a><strong>引入less</strong></h4><blockquote>
<p><a href="https://lesscss.org/#">Less</a> 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。</p>
</blockquote>
<p>安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">less</span> -D</span><br><span class="line">npm <span class="keyword">install</span> <span class="keyword">less</span>-loader -D</span><br></pre></td></tr></table></figure>
<p>在webpack配置文件中添加less编译配置即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="引入autoprefixer"><a href="#引入autoprefixer" class="headerlink" title="引入autoprefixer"></a><strong>引入autoprefixer</strong></h4><blockquote>
<p>由于css在不同浏览器有兼容问题，需要给样式添加前缀，这里引入<a href="https://postcss.org/">postcss</a>的插件<a href="https://github.com/postcss/autoprefixer">autoprefixer</a>去自动添加来解决。</p>
</blockquote>
<p>安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> autoprefixer-D</span><br><span class="line">npm <span class="keyword">install</span> postcss-loader -D</span><br></pre></td></tr></table></figure>

<p>修改在webpack配置文件中添加less编译配置，添加 postcss-loader</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根目录下新建 postcss.config.js 文件，添加如下内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 此配置的意思是，在中国使用率超过0.15%的浏览器，均使用autoprefixer进行添加前缀</span></span><br><span class="line">        <span class="comment">// 详见 https://github.com/postcss/autoprefixer#readme</span></span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)(&#123; <span class="attr">overrideBrowserslist</span>: [<span class="string">&#x27;&gt; 0.15% in CN&#x27;</span>]&#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="引入Mobx以及支持装饰器写法"><a href="#引入Mobx以及支持装饰器写法" class="headerlink" title="引入Mobx以及支持装饰器写法"></a><strong>引入Mobx以及支持装饰器写法</strong></h4><p><a href="https://zh.mobx.js.org/">Mobx</a>，</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> mobx -D</span><br><span class="line">npm <span class="keyword">install</span> mobx-react -D</span><br></pre></td></tr></table></figure>

<p>通常我们使用装饰器的方式来使用Mobx, 引入</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install @babel/plugin-proposal-decorators -D</span><br><span class="line"><span class="built_in">npm</span> install @babel/plugin-syntax-<span class="class"><span class="keyword">class</span>-<span class="title">properties</span> -<span class="title">D</span></span></span><br></pre></td></tr></table></figure>

<p>在.babelrc文件中添加配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="comment">// 支持装饰器语法</span></span><br><span class="line">    [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="comment">// 与plugin-proposal-decorators搭配使用</span></span><br><span class="line">    [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="string">&quot;loose&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">   ]</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体解析<a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">babel-plugin-proposal-decorators</a></p>
<h4 id="引入antd"><a href="#引入antd" class="headerlink" title="引入antd"></a><strong>引入antd</strong></h4><blockquote>
<p><a href="https://ant.design/docs/react/introduce-cn">antd</a>是阿里开源的组件库，引入主要为了快速搭建界面</p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> antd -S</span><br></pre></td></tr></table></figure>
<p>安装后尝试使用，直接就报错了==！，这里给出遇到问题的解决方案</p>
<h4 id="antd-less-编译-报-bezierEasingMixin-错误，详见-issue"><a href="#antd-less-编译-报-bezierEasingMixin-错误，详见-issue" class="headerlink" title="antd: less 编译 报 .bezierEasingMixin() 错误，详见 issue"></a><strong>antd: less 编译 报 .bezierEasingMixin() 错误，详见 <a href="https://github.com/ant-design/ant-design/issues/7927">issue</a></strong></h4><p>解决方案：修改webpack配置文件中less的配置项，开启less-loader的javascriptEnabled选项, 如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">            use: [ </span><br><span class="line">                <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">                <span class="comment">// 注意：此时要把less-loader放在最右端</span></span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        lessOptions: &#123;</span><br><span class="line">                            <span class="comment">// https://github.com/ant-design/ant-design/issues/7927#issuecomment-400368810</span></span><br><span class="line">                            javascriptEnabled: <span class="literal">true</span>, </span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="antd-less-编译-报-ceil相关使用方法错误，详见-issue"><a href="#antd-less-编译-报-ceil相关使用方法错误，详见-issue" class="headerlink" title="antd: less 编译 报 ceil相关使用方法错误，详见 issue"></a><strong>antd: less 编译 报 ceil相关使用方法错误，详见 <a href="https://github.com/ant-design/ant-design/pull/17375">issue</a></strong></h4><p>解决方案：修改webpack配置文件中less的配置项，开启strictMath选项, 如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">        lessOptions: &#123;</span><br><span class="line">            javascriptEnabled: true, </span><br><span class="line">            <span class="regexp">//</span> 严格数学计算关闭，不然antd样式编译报错</span><br><span class="line">            strictMath: false, <span class="regexp">//</span> https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ant-design/</span>ant-design<span class="regexp">/pull/</span><span class="number">17375</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="antd-打包优化"><a href="#antd-打包优化" class="headerlink" title="antd: 打包优化"></a><strong>antd: 打包优化</strong></h4><p><strong>1. 使用webpack-bundle-analyzer分析文件大小</strong></p>
<blockquote>
<p>此插件可以计算出打包文件中各文件大小，有利于优化</p>
</blockquote>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>webpack-<span class="keyword">bundle-analyzer </span>-D</span><br></pre></td></tr></table></figure>
<p>webpack配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> BundleAnalyzerPlugin(),</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刚开始引入antd有包增大了很多，需要优化。使用下面两个优化方法后，包减小了8M左右<br><strong>2. 使用<a href="https://github.com/ant-design/babel-plugin-import">babel-plugin-import</a></strong></p>
<blockquote>
<p>使用import应用antd中的组件时，会将antd所有组件都打入bundle包，babel-plugin-import可以实现按需加载</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install babel-plugin-<span class="keyword">import</span> -S</span><br></pre></td></tr></table></figure>
<p>.babelrc 文件中添加配置</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    // babel-plugin-import：antd按需加载，减小包大小. <span class="string">&quot;style&quot;</span>: <span class="string">&quot;css&quot;</span>样式会加载css文件， <span class="string">`style: true`</span> 样式会加载 less 文件</span><br><span class="line">    [<span class="string">&quot;import&quot;</span>, &#123; <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;antd&quot;</span>, <span class="string">&quot;libraryDirectory&quot;</span>: <span class="string">&quot;lib&quot;</span>, <span class="string">&quot;style&quot;</span>: <span class="string">&quot;css&quot;</span>&#125;, <span class="string">&quot;antd&quot;</span>]</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>3. 使用day.js替换moment.js</strong></p>
<blockquote>
<p>antd中默认使用moment.js（560多kb），day.js只有2kb</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install dayjs -S</span><br><span class="line"><span class="comment">// antd 中 moment.js替换为day.js需要借助插件</span></span><br><span class="line">npm install antd-dayjs-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<p>在webpack配置文件中使用antd-dayjs-webpack-plugin</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AntdDayjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;antd-dayjs-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> AntdDayjsWebpackPlugin(),</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二阶段的配置文件"><a href="#第二阶段的配置文件" class="headerlink" title="第二阶段的配置文件"></a><strong>第二阶段的配置文件</strong></h4><p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;luffy&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&gt;  与 ONE PIECE（海贼王） 的主角同名，意为逆风起航&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --config webpack.common.js --progress &quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.common.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@babel/plugin-proposal-decorators&quot;</span>: <span class="string">&quot;^7.13.15&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/plugin-syntax-class-properties&quot;</span>: <span class="string">&quot;^7.12.13&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;antd-dayjs-webpack-plugin&quot;</span>: <span class="string">&quot;^1.0.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;autoprefixer&quot;</span>: <span class="string">&quot;^10.2.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^5.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^5.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^8.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mobx&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mobx-react&quot;</span>: <span class="string">&quot;^7.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^5.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^5.32.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-bundle-analyzer&quot;</span>: <span class="string">&quot;^4.4.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.11.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.13.15&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.13.15&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-react&quot;</span>: <span class="string">&quot;^7.13.13&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;antd&quot;</span>: <span class="string">&quot;^4.15.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-plugin-import&quot;</span>: <span class="string">&quot;^1.13.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dayjs&quot;</span>: <span class="string">&quot;^1.10.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>webpack配置文件</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">const HtmlWebpackPlugin = require(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> 分析包大小工具</span><br><span class="line">const BundleAnalyzerPlugin = require(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="regexp">//</span> dayjs 替换momentjs , 减小包大小 <span class="number">560</span>k --&gt; <span class="number">5</span>k</span><br><span class="line">const AntdDayjsWebpackPlugin = require(<span class="string">&#x27;antd-dayjs-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>, <span class="regexp">//</span> 开发环境 development、production</span><br><span class="line">    entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    devtool: <span class="string">&#x27;inline-source-map&#x27;</span>, <span class="regexp">//</span> 生产环境关掉</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        open: true, <span class="regexp">//</span> 运行时自动打开浏览器</span><br><span class="line">        compress: true, <span class="regexp">//</span> 启用gzip压缩</span><br><span class="line">        port: <span class="number">9000</span>, <span class="regexp">//</span> 端口</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;index.js&#x27;</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        clean: true, <span class="regexp">//</span> 每次打包前自动清理dist文件夹</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(js|jsx)?$/</span>,</span><br><span class="line">                <span class="regexp">//</span> 开启缓存</span><br><span class="line">                options: &#123;</span><br><span class="line">                    cacheDirectory: true</span><br><span class="line">                &#125;,</span><br><span class="line">                loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">                use: [ </span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">                    <span class="regexp">//</span> 为了解决引入antd样式解析编译失败，需要改为以下写法,添加配置</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            lessOptions: &#123;</span><br><span class="line">                                javascriptEnabled: true, <span class="regexp">//</span> https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ant-design/</span>ant-design<span class="regexp">/issues/</span><span class="number">7927</span><span class="comment">#issuecomment-400368810</span></span><br><span class="line">                                <span class="regexp">//</span> 严格数学计算关闭，不然antd样式编译报错</span><br><span class="line">                                strictMath: false, <span class="regexp">//</span> https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ant-design/</span>ant-design<span class="regexp">/pull/</span><span class="number">17375</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">                type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class="line">                type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">&#x27;index.html&#x27;</span>, <span class="regexp">//</span> html模板的生成路径, 文件名称,  路径基于 output 中的path 路径</span><br><span class="line">            template: path.resolve(<span class="string">&#x27;./index.html&#x27;</span>), <span class="regexp">//</span>html模板, 从根目录开始</span><br><span class="line">            inject: true, <span class="regexp">//</span> true：默认值，script标签位于html文件的 body 底部</span><br><span class="line">        &#125;),</span><br><span class="line">        new BundleAnalyzerPlugin(),</span><br><span class="line">        new AntdDayjsWebpackPlugin(),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>项目的搭建阶段到这来就告一段落，主要就是记录配置项与注意点，具体的配置步骤可clone源码，查看提交记录。后续应该还会引入ts，eslint等等配置，完成后会另外开篇。</p>
]]></content>
      <categories>
        <category>Study</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建 Hexo + next 博客</title>
    <url>/post/202103300830/</url>
    <content><![CDATA[<blockquote>
<p>第一次搭建博客，使用的是hexo，第一篇献给 <a href="https://hexo.io/zh-cn/docs/">Hexo</a></p>
</blockquote>
<span id="more"></span>

<p>如何搭建 <a href="https://nodejs.org/zh-cn/">Node</a> 环境这里就不赘述了，下面开始搭建流程</p>
<h3 id="全局安装Hexo"><a href="#全局安装Hexo" class="headerlink" title="全局安装Hexo"></a><strong>全局安装Hexo</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="创建项目-amp-安装依赖"><a href="#创建项目-amp-安装依赖" class="headerlink" title="创建项目 &amp; 安装依赖"></a><strong>创建项目 &amp; 安装依赖</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo init Blog</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> Blog</span><br><span class="line"><span class="variable">$</span> npm install</span><br></pre></td></tr></table></figure>

<p>运行命令</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>


<p>在浏览器中打开 <a href="http://localhost:4000/">http://localhost:4000</a> ，就可以看到初始项目模板界面<br><img src="/post/202103300830/202103312050.png" alt="图片"></p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a><strong>打包</strong></h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure>
<p>资源会被包到 Blog/public 文件夹下</p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a><strong>发布</strong></h3><p>Hexo支持多种发布方式，我使用 <a href="https://hexo.io/zh-cn/docs/github-pages">github-pages</a> 的方式</p>
<p>这里说一下我的个人思路<br>我在自己的 <a href="https://github.com/lianglei777">github</a> 上创建了三个repo，分别为命名FileResource、lianglei777.github.io、Blog</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">FileResource : 用于存放图片、文件等资源文件, 通过链接的形式在博客文章中引用</span><br><span class="line">lianglei777<span class="selector-class">.github</span><span class="selector-class">.io</span> : 打包后的发布repo，命名格式必须是 &lt;你的 GitHub 用户名&gt;<span class="selector-class">.github</span>.io</span><br><span class="line">Blog : 博客项目源代码repo，我设置成的了 私有，只有自己可以查看</span><br></pre></td></tr></table></figure>

<p>这样可以让 <u>代码开发</u> 和 <u>发布模块</u> 分离，容易管理，资源使用链接形式，可以加快打包速度,不过网络差的情况下图片可能不展示，而且github在国内的访问速度可能不太好，也可以选择其他图床，感兴趣的可以自行研究。</p>
<p>修改项目路径下配置文件字段 Blog/_config.yml</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> https:<span class="comment">//github.com/lianglei777/lianglei777.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> main</span><br></pre></td></tr></table></figure>
<p>repository 字段为 &lt;你的 GitHub 用户名&gt;.github.io 的git地址。</p>
<p>发布命令:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>
<p>浏览器访问 “ &lt;你的 GitHub 用户名&gt;.github.io “ 就可以查看。</p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a><strong>安装主题</strong></h3><p>Hexo 支持很多第三方 <a href="https://hexo.io/themes/">主题</a>，我使用的是开源主题 <a href="https://theme-next.js.org/">Next</a></p>
<p>根目录下执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>修改路径下文件中配置字段 Blog/_config.yml</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>再次执行 Hexo server,界面变为如下</p>
<p><img src="/post/202103300830/202103312227.png" alt="图片"></p>
<p>next 主题配置项比较多，这里给出我的 <a href="https://github.com/lianglei777/hexo-theme-next/blob/next-leon/_config.yml">配置文件</a>（ps: 建议继续往下看，后面还有补充）</p>
<p>界面变化为如下<br><img src="/post/202103300830/202103312239.png" alt="图片"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>Hexo整体的搭建过程其实并不复杂，但是 hexo 和 next 的配置项太多了，我这里也只配置了部分设置，有些想自定义的地方的配置暂时还没找到==！,一个好看易用的博客还需要之后慢慢打磨。</p>
<hr>
<p><strong>Tip: 2021.4.3 做了补充</strong></p>
<p><strong>找到了一个很好的教程，跟着教程对我的博客进行了全面的优化</strong></p>
<blockquote>
<p>教程链接：<a href="https://wylu.me/tags/Hexo/">wylu</a></p>
</blockquote>
<p><strong>谈一下遇到的问题和优化思路</strong></p>
<h3 id="Next库配置管理问题"><a href="#Next库配置管理问题" class="headerlink" title="Next库配置管理问题"></a><strong>Next库配置管理问题</strong></h3><blockquote>
<p>我的hexo版本是 5.4.0 教程中的hexo版本是 3.8.0,<br>虽然版本不一致，但是大多数配置都还能用，仍然可以配置出很多实用的功能。</p>
</blockquote>
<p>为了便于保存next配置，我fork了next的源码到了自己的git仓库，修改过的分支地址 <a href="https://github.com/lianglei777/hexo-theme-next/tree/next-leon">next-leon</a>, 这是我在用的配置，读者可以自行对比修改,也可以直接用我的这个主题分支，不过有些信息配置需要自行修改。</p>
<p>引用方式如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"> <span class="string">&quot;hexo-theme-next&quot;</span>: <span class="string">&quot;git+https://github.com/lianglei777/hexo-theme-next.git#next-leon&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="图片资源不展示的问题"><a href="#图片资源不展示的问题" class="headerlink" title="图片资源不展示的问题"></a><strong>图片资源不展示的问题</strong></h3><p>通过</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image </span><br></pre></td></tr></table></figure>
<p>引入的图片库，编译的图片链接前缀带有 /.io/ ,导致图片不显示，具体可看这个<a href="https://github.com/xcodebuild/hexo-asset-image/issues/47">issue</a>。<br>其实最新代码已经修复了这个问题，但是npm平台的上包还是老代码.</p>
<p>可以改为如下引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hexo-asset-image&quot;</span>: <span class="string">&quot;git+https://github.com/xcodebuild/hexo-asset-image.git&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="生成永久外链的问题"><a href="#生成永久外链的问题" class="headerlink" title="生成永久外链的问题"></a><strong>生成永久外链的问题</strong></h3><blockquote>
<p>很多教程推荐使用 hexo-abbrlink，去生成永久外链，但是我尝试了很多次，在hexo 5.4.0 版本中都没有用，生成的连接都包含 undefined，无法使用。</p>
</blockquote>
<p>其实最新的hexo版本中，有关于链接的配置。这里给出我的解决方案以及配置。</p>
<p><strong>Hexo 配置文件 _config.yml，修改permalink字段</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 此处使用id作为链接唯一标识，id规则: 当前时间精确到分,例如：202104010203</span><br><span class="line">permalink: post&#x2F;:id&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>同时博客文章md文件顶部需要添加 id 如下:</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">_posts</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">快速搭建</span> <span class="string">Hexo</span> <span class="string">+</span> <span class="string">next</span> <span class="string">博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-04-01 21:39:38</span></span><br><span class="line"><span class="attr">id:</span> <span class="number">202103300830</span> <span class="comment"># &lt;--- 像这样，不同文章id必须不一样</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">Hexo</span>]</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">Tool</span>, <span class="string">Hexo</span>]</span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><strong>生成的链接就变成了这样</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>lianglei777.github.io<span class="regexp">/post/</span><span class="number">202103300830</span>/</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>Tip: 2021.4.7 做了补充</strong></p>
<p><strong>考虑到一些细节配置没有细说，这里给出一些说明</strong></p>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a><strong>安装环境</strong></h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span>: <span class="number">5</span>.<span class="number">4</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">hexo</span>-cli: <span class="number">4</span>.<span class="number">2</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">NexT</span>: <span class="number">8</span>.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">OS</span>: macOS <span class="number">10</span>.<span class="number">15</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="个性化样式功能"><a href="#个性化样式功能" class="headerlink" title="个性化样式功能"></a><strong>个性化样式功能</strong></h3><ul>
<li>文章的置顶功能 （参见首页的置顶）</li>
<li>顶部的阅读进度条 （参见顶部的蓝色进度条）</li>
<li>markdown语法的链接颜色自定义 (参见本文的链接样式)</li>
<li>文章的结束标志 (参见文末的 “本文结束  感谢阅读” 样式)</li>
<li>其他的一些样式就是Next主题自带的样式配置</li>
</ul>
<p><em><strong>后面有时间会把详细修改过程补上</strong></em></p>
<h3 id="傻瓜式用法"><a href="#傻瓜式用法" class="headerlink" title="傻瓜式用法"></a><strong>傻瓜式用法</strong></h3><p><strong>第一步</strong></p>
<p>用下面的package.json配置替换自己博客的package.json</p>
<p><strong>package.json配置文件:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;5.4.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;5.4.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-asset-image&quot;</span>: <span class="string">&quot;git+https://github.com/xcodebuild/hexo-asset-image.git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-autonofollow&quot;</span>: <span class="string">&quot;1.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index-pin-top&quot;</span>: <span class="string">&quot;0.2.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-searchdb&quot;</span>: <span class="string">&quot;1.3.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;4.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-symbols-count-time&quot;</span>: <span class="string">&quot;0.7.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;0.0.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-theme-next&quot;</span>: <span class="string">&quot;git+https://github.com/lianglei777/hexo-theme-next.git#next-leon&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步</strong></p>
<p>执行</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>

<p>其它的hexo自带功能，可以自行配置</p>
]]></content>
      <categories>
        <category>Tool</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
